<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mustang Blog</title>
  
  <subtitle>天行健，君子以自强不息；地势坤，君子以厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yuenshui.com/"/>
  <updated>2017-10-08T03:18:11.000Z</updated>
  <id>http://yuenshui.com/</id>
  
  <author>
    <name>于恩水(Mustang Yu)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NW.js填坑之window.open</title>
    <link href="http://yuenshui.com/2017/10/08/NW-js%E5%A1%AB%E5%9D%91%E4%B9%8Bwindow-open/"/>
    <id>http://yuenshui.com/2017/10/08/NW-js填坑之window-open/</id>
    <published>2017-10-08T02:25:12.000Z</published>
    <updated>2017-10-08T03:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>江湖传闻NW的坑多，多得像繁星闪闪，很多坑没人填。<br>那我们就遇到一个填一个吧，总是会填一个少一个。<br>NV.js v0.13 官网文档：</p><hr><p><img src="/img/Snip20171008_5.png"></p><hr><p>上面是NW官网对Windows.open的解释。第一个参数URL，必选；第二个参数选项，可选；第三个参数回调，可选；<br>从文档看，回调函数可以获取窗口句柄，然后我们可以通过句柄进行子窗口的控制和通讯。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#Button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">winHandler.close();</div><div class="line">&#125; <span class="keyword">catch</span> (e)&#123;</div><div class="line"><span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div><div class="line"><span class="built_in">require</span>(<span class="string">'nw.gui'</span>).Window.open(<span class="string">'view.html'</span>, &#123;</div><div class="line">new_instance: <span class="literal">true</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">new_win</span>) </span>&#123;</div><div class="line">winHandler = new_win</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">这段代码是无法实现每次新开窗口前关闭上次打开的窗口，此时回调函数的参数new_win是<span class="literal">null</span>。</div></pre></td></tr></table></figure></p><p>如果你有此想法，就不要用选项参数了，实测，如果使用第二个选项参数，回调函数获取不到窗口句柄。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#Button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">winHandler.close();</div><div class="line">&#125; <span class="keyword">catch</span> (e)&#123;</div><div class="line"><span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div><div class="line"><span class="built_in">require</span>(<span class="string">'nw.gui'</span>).Window.open(<span class="string">'view.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">new_win</span>) </span>&#123;</div><div class="line">winHandler = new_win</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">这样，就能获取窗口句柄，实现控制和通信了。</div></pre></td></tr></table></figure></p><pre><code>———— 官网文档害死人啊^_^</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;江湖传闻NW的坑多，多得像繁星闪闪，很多坑没人填。&lt;br&gt;那我们就遇到一个填一个吧，总是会填一个少一个。&lt;br&gt;NV.js v0.13 官网文档：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/img/Snip20171008_5.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上面是
      
    
    </summary>
    
    
      <category term="NW.js" scheme="http://yuenshui.com/tags/NW-js/"/>
    
      <category term="window.open" scheme="http://yuenshui.com/tags/window-open/"/>
    
  </entry>
  
  <entry>
    <title>数独解题器</title>
    <link href="http://yuenshui.com/2017/03/02/Sudoku-solver/"/>
    <id>http://yuenshui.com/2017/03/02/Sudoku-solver/</id>
    <published>2017-03-01T16:00:00.000Z</published>
    <updated>2017-03-03T12:14:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习算法，就拿数独解题试刀吧。^_^</p><style>.sudokuLeft{padding: 0px 5px 0px 0px;line-height: 42px;}.sudokuFooter,.sudokuLeft{margin:0px;font-size: 22px;text-align: right;font-weight: 800;}.sudokuFooter{line-height: 24px;}.sudokuFooter div{display:inline-block; width:42px;text-align:center;padding:0px;}.sudokuLeft div{width:42px; height:42px;}.sudokuArea, .sudokuArea td{border:0px solid red; padding:0px;vertical-align:top;}.sudokuBox {margin: auto auto 1px; padding:0px;}.sudokuBox tr:nth-child(2n){background:#FFFFFF;!important}.sudokuBox td{width: 40px;height: 40px;padding:0px;    border: 1px solid #d8e2eb;}.sudokuBox div, .sudokuBox input {padding:0px;width: 40px; text-align:center}.sudokuBox input{font-size:22px;height: 24px; background: transparent;}.sudokuBox div{font-size: 12px;height: 12px;line-height: 12px;}.sudokuRight{vertical-align: top; width:250px;}.sudokuRight div {padding: 5px;} .sdkButton{display: inline-block; zoom: 1;*display: inline; vertical-align: baseline; margin: 2px; outline: none;cursor: pointer; text-align: center; text-decoration: none; font: 14px/100% Arial, Helvetica, sans-serif; padding: .5em .8em .55em; text-shadow: 0 1px 1px rgba(0,0,0,.3); -webkit-border-radius: .5em; -moz-border-radius: .5em; border-radius: .5em; -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.2); -moz-box-shadow: 0 1px 2px rgba(0,0,0,.2); box-shadow: 0 1px 2px rgba(0,0,0,.2); }.bw{background: #EEEEEE;}.bb{background: #99AAFF;}.historyBox{min-height: 380px;overflow-y: auto;font-size: 12px;}</style><table class="sudokuArea"><tr><td width="40" height="370"><div id="sudokuLeft" class="sudokuLeft"></div></td><td width="370"><table class="sudokuBox" id="sudokuBox"></table><div id="sudokuFooter" class="sudokuFooter"></div><p><input type="button" id="importSudoku" class="sdkButton bw" value="导入"><input type="button" id="setSudoku" class="sdkButton bw" value="清空"><input type="button" id="cleanButton" class="sdkButton bw" value="重新计算"><input style="display:none" type="button" id="testButton" class="sdkButton" value="测试"><input type="button" id="runButton" class="sdkButton" value="计算"><input type="button" id="nextButton" style="display: none;" class="sdkButton" value="下一步"></p><p>　　导入或输入已知的数字，然后点击“计算”按钮，就可以看到数独方格内显示出标注，一直点击“下一步”，可以看到求解过程。右侧的过程描述方便学习数独解法。</p><p>　　“清空”按钮可以清空所有数字内容，方便重现填入数字。</p><p>　　“重新计算”按钮方便对数独重新反复观看解题过程。</p><br></td><td class="sudokuRight"><div><div class="historyBox" style="padding:0px;"><ol style="margin-left: 30px;" id="historyBox"></ol></div></div></td></tr></table><script>    var html = "";    var gSum = 45;    var sB = document.getElementById("sudokuBox");    var row, cell1, nodeE, style;    for(var i = 0; i < 9; i++) {        row = sB.insertRow(i);        for(var j = 0; j < 9; j++) {            cell1 = row.insertCell(j);            cell1.setAttribute("id", "sudokuPoint" + i + j);            cell1.innerHTML = "<div></div><input type=\"text\" />";            style = "";            if(j % 3 == 2) style += "border-right-width:3px;";            if(i % 3 == 2) style += "border-bottom-width:3px;";            if(j == 0) style += "border-left-width:3px;";            if(i == 0) style += "border-top-width:3px;";            if(style != "") cell1.style = style;        }    }    var sdkData = [        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0],        [0,0,0,0,0,0,0,0,0]    ];    var rowDoc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', "I"];    var colDoc = ['1', '2', '3', '4', '5', '6', '7', '8', "9"];    var runData = [];    var vacancy = [];    var vacData = [[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1]];    var sudokuLeft = document.getElementById("sudokuLeft")    var sudokuFooter = document.getElementById("sudokuFooter")    for(var i = 0; i < 9; i++) {        var note = document.createElement('div');        note.innerHTML = rowDoc[i];        sudokuLeft.appendChild(note);        note = document.createElement('div');        note.innerHTML = colDoc[i];        sudokuFooter.appendChild(note);    }    document.getElementById("importSudoku").onclick = function() {        var html = '<div style="width:100%;text-align:center;margin:0 auto;"><textarea id="importBox" rows="9" cols="15">000000000\r\n000000000\r\n000000000\r\n000000000\r\n000000000\r\n000000000\r\n000000000\r\n000000000\r\n000000000</textarea><br><input type="button" style="width: 80px;padding: 5px;font-size: 16px;margin: 5px;" value="导入" onclick="opener.importSudoku(document.getElementById(\'importBox\').value);window.close();" /></div>';        myWindow=window.open('','','width=200, height=200, scrollbars=yes')        myWindow.document.write(html);        myWindow.focus()        return;    }    function importSudoku(content) {        var cA = content.split(/\s+/);        for(var i = 0; i < 9; i++) for(var j = 0; j < 9; j++) {            sdkData[i][j] = typeof cA[i][j] == "undefined" ? 0 : parseInt(cA[i][j]);        }        for(var i in sdkData) runData[i] = sdkData[i].concat();        vacancy = getVacancy(runData);        setNote(runData, vacancy);        viewInit();        viewNote();        cleanHistory();        document.getElementById("nextButton").style.display = "";        if(prePoint[0] != -1) document.getElementById("sudokuPoint" + prePoint[0] + prePoint[1]).className = "";    }    function viewInit () {        for(var i = 0; i < 9; i++) {            for(var j = 0; j < 9; j++) {                nodeE = document.getElementById("sudokuPoint" + i + j);                nodeE.innerHTML = "<div></div><input type=\"text\" value='" + (sdkData[i][j] > 0 ? sdkData[i][j] : "") + "' />";                nodeE.className = sdkData[i][j] > 0 ? "bw" : "";            }        }    }    document.getElementById("setSudoku").onclick = setSudoku;    function setSudoku() {        initData();        viewInit();        cleanHistory();    }    // 测试    document.getElementById("testButton").onclick = function() {        solveNakedTriplet(vacancy);    }    document.getElementById("cleanButton").onclick = function() {        //document.getElementById("nextButton").style.display = "none";        for(var i in sdkData) runData[i] = sdkData[i].concat();        vacancy = getVacancy(runData);        setNote(runData, vacancy);        viewInit();        viewNote();        cleanHistory();        document.getElementById("nextButton").style.display = "";        if(prePoint[0] != -1) document.getElementById("sudokuPoint" + prePoint[0] + prePoint[1]).className = "";    }    function initData() {        for(var i = 0; i < 9; i++) for (var j = 0; j < 9; j++) sdkData[i][j] = 0;    }    function checkInput() {        var v = 0, num = 0;        for(var i = 0; i < 9; i++) for (var j = 0; j < 9; j++) {            v = parseInt(document.getElementById("sudokuPoint" + i + j).childNodes[1].value);            sdkData[i][j] = v ? v : 0;            if(v) num++;        }        return num > 16;    }    var prePoint = [-1, -1];    document.getElementById("nextButton").onclick = function() {        var nodeE, rs, stepString = "", vIndex;        var cDoc = {'g': '九宫格', 'col': "列", 'row': '行'}        var runS = false;        for(var i in vacancy) if(vacancy[i][2] == 0) {            runS = true;             break;        }        if(!runS) {            console.log("已经计算完成，不需要计算");            return;        }        if(prePoint[0] != -1) document.getElementById("sudokuPoint" + prePoint[0] + prePoint[1]).className = "";        // 唯一候选        rs = solveEndPoint(runData);        if(rs[0] != -1) stepString = "唯一候选法[" + rowDoc[rs[0]] + "," + colDoc[rs[1]] + "]所在" + cDoc[rs[4]] + "只可以是：" + rs[2];        console.log("step1:", rs);        // solveBaseAban基础摒弃法        if(rs[0] == -1) {            rs = solveBaseAban(vacancy);            console.log("step2:", rs);            if(rs[0] != -1) stepString = "基础摒弃法[" + rowDoc[rs[0]] + "," + colDoc[rs[1]] + "]所在" + cDoc[rs[4]] + "只有他可以为：" + rs[2];        }        // 隐式唯一候选        if(rs[0] == -1) {            rs = solveEndPointHidden(vacancy);            console.log("step3:", rs);            if(rs[0] != -1) stepString = "隐式唯一候选[" + rowDoc[rs[0]] + "," + colDoc[rs[1]] + "]只可以是：" + rs[2];        }        if(rs[0] != -1) {            try {                nodeE = document.getElementById("sudokuPoint" + rs[0] + rs[1]);                nodeE.className = "bb";                nodeE.innerHTML = "<div></div><input type=\"text\" value='" + rs[2] + "' />";                vIndex = rs[5] ? rs[5] : getVacancyIndex(rs);                console.log("vIndex:", vIndex);                vacancy[vIndex][2] = rs[2];                 vIndex > -1 && setVacancy(vacancy, vIndex);                addHistory(stepString);                runData[rs[0]][rs[1]] = rs[2];                vacData[rs[0]][rs[1]] = -1;            }            catch(e) {                console.log(e, rs);            }        }        else {            console.log("solveYuanyang");            var history = solveYuanyang(vacancy);            for(var i in history) addHistory(history[i]);            history = solveAreaClean(vacancy);            for(var i in history) addHistory(history[i]);            history = solveYuanyangHidden(vacancy);            for(var i in history) addHistory(history[i]);            history = solveXwing(vacancy);            for(var i in history) addHistory(history[i]);            history = solveXYwing(vacancy);            for(var i in history) addHistory(history[i]);            history = solveNakedTriplet            for(var i in history) addHistory(history[i]);        }        //console.log(vacancy);        viewNote();        //console.log(stepString);        if(rs[0] != -1) prePoint = rs;        //console.log(runData);    }    document.getElementById("runButton").onclick = function() {        if(!checkInput()) {alert("至少输入17个数字才可以计算"); return };        for(var i in sdkData) runData[i] = sdkData[i].concat();        //for(var i in sdkData) vacData[i] = -1;        //console.log(sdkData);        vacancy = getVacancy(runData);        setNote(runData, vacancy);        viewInit();        viewNote();        //solveYuanyang(vacancy);        //viewNote();        cleanHistory();        document.getElementById("nextButton").style.display = "";    }    function getVacancyIndex(point) {        //console.log("getVacancyIndex:", point);        for(var i in vacancy) if(vacancy[i][0] == point[0] && vacancy[i][1] == point[1]) {            //console.log(vacancy[i], i);            return i;        }        return -1;    }    function cleanHistory() {        document.getElementById("historyBox").innerHTML = "";    }    function addHistory(str) {        var oLi = document.createElement('li');        oLi.innerHTML = str;        document.getElementById("historyBox").appendChild(oLi);    }    function viewNote () {        var noteString = "";        for(var i in vacancy) {            noteString = "";            if(vacancy[i][2] == 0) noteString = vacancy[i][3];            document.getElementById("sudokuPoint" + vacancy[i][0] + vacancy[i][1]).firstChild.innerHTML = noteString;        }    }    function setNote(data, vac) {        var point;        for(var v in vac) {            point = vac[v];            pa = [1, 1, 1, 1, 1, 1, 1, 1, 1];            for(var i = 0; i < 9; i++) {                if(data[i][point[1]] == 0) continue;                pa[data[i][point[1]] - 1] = 0;            }             for(var j = 0; j < 9; j++) {                if(data[point[0]][j] == 0) continue;                pa[data[point[0]][j] - 1] = 0;            }            for(var i = parseInt(point[0] / 3) * 3, p1 = 0; p1 < 3; p1++, i++) for(var j = parseInt(point[1] / 3) * 3, p2 = 0; p2 < 3; p2++, j++) {                if(data[i][j] == 0) continue;                pa[data[i][j] - 1] = 0;            }            for(var i in pa) if(pa[i] != '0') vac[v][3] += "" + (parseInt(i) + 1);        }    }    // 遍历出每一个空位，进行尝试解题    function setVacancy(data, i) {        var point = vacancy[i], xStart, yStart;        //console.log("setVacancy:", i, point);        xStart = parseInt(point[0] / 3) * 3;        yStart = parseInt(point[1] / 3) * 3;        for(var x in vacancy) {            if(vacancy[x][2] > 0) continue;            if(vacancy[x][0] == point[0] ||                 vacancy[x][1] == point[1] ||                 (vacancy[x][0] >= xStart && vacancy[x][0] < xStart + 3 && vacancy[x][1] >= yStart && vacancy[x][1] < yStart + 3))            {                //console.log("setPre:", vacancy[x], point[2]);                vacancy[x][3] = vacancy[x][3].replace(point[2], "");                //console.log("setFre:", vacancy[x]);            }        }    }    // 遍历出每一个空位，进行尝试解题    function getVacancy(data) {        var vacancy = [];        for(var i = 0; i < 9; i++) {            for(var j = 0; j < 9; j++) {                if(data[i][j] == 0) {                    vacancy.push([i, j, 0, ""]);                    vacData[i][j] = vacancy.length - 1;                }            }        }        return vacancy;    }    function existDelete(str, char) {        var ret = str.indexOf(char);        if(ret > -1) str = str.replace(char, '');        return [ret, str];    }    function getXY(vi) {        return "[" + rowDoc[vacancy[vi][0]] + "," + colDoc[vacancy[vi][1]] + "]";    }    // 三链数删减法    function solveNakedTriplet(vac) {        var historyList = [];        // 遍历每一行        for(var i = 0; i < 9; i++) for(var j = 0; j < 9; j++) {// 遍历每一个方格            var cPi = vacData[i][j];    // vac索引            if(cPi == -1) continue;            var cP = vacancy[cPi];        // vac元素            console.log("row p1:", i, j, vacData[i][j], cP);            var cStr = cP[3];            // 可选数字            if(cStr.length != 2 && cStr.length != 3) continue;            for(var j2 = j + 1; j2 < 9; j2++) {                var cPi2 = vacData[i][j2];    // vac索引                if(cPi2 == -1) continue;                var cP2 = vacancy[cPi2];        // vac元素                console.log("       p2:", i, j2, vacData[i][j2], cP2);                var cStr2 = cP2[3];            // 可选数字                var fullStr = "";                if(cStr.length == 3) {                    if(cStr2.length == 3) {                        if(cStr != cStr2) continue;                        else {                            fullStr = cStr;                        }                    }                    else if(cStr2.length == 2) {                        if(cStr.indexOf(cStr2[0]) == -1 || cStr.indexOf(cStr2[1]) == -1) continue;                        fullStr = cStr;                    }                    else continue;                }                else {                    if(cStr2.length == 2) {                        if(cStr == cStr2) continue; // 数对，跳过                        if(cStr2.indexOf(cStr[0]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[1]].sort().join();                        }                        else if(cStr2.indexOf(cStr[1]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[0]].sort().join();                        }                        else continue;                    }                    else if(cStr2.length == 3) {                        if(cStr2.indexOf(cStr[0]) == -1 || cStr2.indexOf(cStr[1]) == -1) continue;                        fullStr = cStr2;                    }                    else continue;                }                console.log("       fulstr:", fullStr);                if(fullStr == "") continue;                for (var j3 = j2 + 1; j3 < 9; j3++) {                    var cPi3 = vacData[i][j3];    // vac索引                    if(cPi3 == -1) continue;                    var cP3 = vacancy[cPi3];        // vac元素                    console.log("         p3:", i, j3, vacData[i][j3], cP3);                    var cStr3 = cP3[3];            // 可选数字                    var reSearch = new RegExp("[" + fullStr + "]");                    if(cStr3.length == 2) {                        if(fullStr.indexOf(cStr3[0]) == -1 || fullStr.indexOf(cStr3[1]) == -1) continue;                        if(cStr3.search(reSearch) == -1) continue;                    }                    else if(cStr3 == fullStr) {                    }                    else continue;                    for(var j4 = 0; j4 < 9; j4++) {                        if(j4 == j || j4 == j3 || j4 == j2) continue;                        var cPi4 = vacData[i][j4];    // vac索引                        if(cPi4 == -1) continue;                        var cP4 = vacancy[cPi4];        // vac元素                        console.log("           p4:", i, j4, vacData[i][j4], cP4);                        var cStr4 = cP4[3];            // 可选数字                        for(var n = 0; n < 3; n++) {                            if(cStr4.indexOf(fullStr[n]) == -1) continue;                            historyList.push("三链数删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi3) + ",三格的可选数字是" + fullStr + ",同行的" + getXY(cPi4) + "可选数字" + cStr4 + "中去除数字:" + fullStr[n]);                            vacancy[cPi4][3] = cStr4.replace(fullStr[n], '');                            console.log("           replace:", vacancy[cPi4], fullStr[n]);                        }                    }                }            }        }        // 遍历每一列        for(var i = 0; i < 9; i++) for(var j = 0; j < 9; j++) {// 遍历每一个方格            var cPi = vacData[j][i];    // vac索引            if(cPi == -1) continue;            var cP = vacancy[cPi];        // vac元素            console.log("col p1:", j, i, vacData[j][i], cP);            var cStr = cP[3];            // 可选数字            if(cStr.length != 2 && cStr.length != 3) continue;            for(var j2 = j + 1; j2 < 9; j2++) {                var cPi2 = vacData[j2][i];    // vac索引                if(cPi2 == -1) continue;                var cP2 = vacancy[cPi2];        // vac元素                console.log("    p2:", j2, i, vacData[j2][i], cP2);                var cStr2 = cP2[3];            // 可选数字                var fullStr = "";                if(cStr.length == 3) {                    if(cStr2.length == 3) {                        if(cStr != cStr2) continue;                        else {                            fullStr = cStr;                        }                    }                    else if(cStr2.length == 2) {                        if(cStr.indexOf(cStr2[0]) == -1 || cStr.indexOf(cStr2[1]) == -1) continue;                        fullStr = cStr;                    }                    else continue;                }                else {                    if(cStr2.length == 2) {                        if(cStr == cStr2) continue; // 数对，跳过                        if(cStr2.indexOf(cStr[0]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[1]].sort().join();                        }                        else if(cStr2.indexOf(cStr[1]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[0]].sort().join();                        }                        else continue;                    }                    else if(cStr2.length == 3) {                        if(cStr2.indexOf(cStr[0]) == -1 || cStr2.indexOf(cStr[1]) == -1) continue;                        fullStr = cStr2;                    }                    else continue;                }                console.log("    fullStr:", fullStr);                if(fullStr == "") continue;                for (var j3 = j2 + 1; j3 < 9; j3++) {                    var cPi3 = vacData[j3][i];    // vac索引                    if(cPi3 == -1) continue;                    var cP3 = vacancy[cPi3];        // vac元素                    console.log("        p3:", j3, i, vacData[j3][i], cP3);                    var cStr3 = cP3[3];            // 可选数字                    var reSearch = new RegExp("[" + fullStr + "]");                    if(cStr3.length == 2) {                        if(fullStr.indexOf(cStr3[0]) == -1 || fullStr.indexOf(cStr3[1]) == -1) continue;                        if(cStr3.search(reSearch) == -1) continue;                    }                    else if(cStr3 == fullStr) {                    }                    else continue;                    for(var j4 = 0; j4 < 9; j4++) {                        if(j4 == j || j4 == j3 || j4 == j2) continue;                        var cPi4 = vacData[j4][i];    // vac索引                        if(cPi4 == -1) continue;                        var cP4 = vacancy[cPi4];        // vac元素                        console.log("            p4:", j4, i, vacData[j4][i], cP4);                        var cStr4 = cP4[3];            // 可选数字                        for(var n = 0; n < 3; n++) {                            if(cStr4.indexOf(fullStr[n]) == -1) continue;                            historyList.push("三链数删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi3) + ",三格的可选数字是" + fullStr + ",同列的" + getXY(cPi4) + "可选数字" + cStr4 + "中去除数字:" + fullStr[n]);                            vacancy[cPi4][3] = cStr4.replace(fullStr[n], '');                            console.log("            replace:", vacancy[cPi4], fullStr[n]);                        }                    }                }            }        }        for(var g33i = 0, rowStart = 0; g33i < 3; ++g33i, rowStart = g33i * 3)        for(var g33j = 0, colStart = 0; g33j < 3; ++g33j, colStart = g33j * 3)        for(var i = rowStart; i < rowStart + 3; i++)        for(var j = colStart; j < colStart + 3; j++) {// 遍历每一个方格            var cPi = vacData[i][j];    // vac索引            if(cPi == -1) continue;            var cP = vacancy[cPi];        // vac元素            console.log("g3 p1:", i, j, vacData[i][j], cP);            var cStr = cP[3];            // 可选数字            if(cStr.length != 2 && cStr.length != 3) continue;            for(var i2 = rowStart; i2 < rowStart + 3; i2++) for(var j2 = colStart; j2 < colStart + 3; j2++) {                if(i == i2 && j == j2) continue;                var cPi2 = vacData[i2][j2];    // vac索引                if(cPi2 == -1) continue;                var cP2 = vacancy[cPi2];        // vac元素                console.log("    p2:", i2, j2, vacData[i2][j2], cP2);                var cStr2 = cP2[3];            // 可选数字                var fullStr = "";                if(cStr.length == 3) {                    if(cStr2.length == 3) {                        if(cStr != cStr2) continue;                        else {                            fullStr = cStr;                        }                    }                    else if(cStr2.length == 2) {                        if(cStr.indexOf(cStr2[0]) == -1 || cStr.indexOf(cStr2[1]) == -1) continue;                        fullStr = cStr;                    }                    else continue;                }                else {                    if(cStr2.length == 2) {                        if(cStr == cStr2) continue; // 数对，跳过                        if(cStr2.indexOf(cStr[0]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[1]].sort().join();                        }                        else if(cStr2.indexOf(cStr[1]) > -1) {                            fullStr = [cStr2[0], cStr2[1], cStr[0]].sort().join();                        }                        else continue;                    }                    else if(cStr2.length == 3) {                        if(cStr2.indexOf(cStr[0]) == -1 || cStr2.indexOf(cStr[1]) == -1) continue;                        fullStr = cStr2;                    }                    else continue;                }                console.log("    fullStr:", fullStr);                if(fullStr == "") continue;                for(var i3 = rowStart; i3 < rowStart + 3; i3++) for(var j3 = colStart; j3 < colStart + 3; j3++) {                    if((i3 == i && j3 == j) || (i3 == i2 && j3 == j2)) continue;                    var cPi3 = vacData[i3][j3];    // vac索引                    if(cPi3 == -1) continue;                    var cP3 = vacancy[cPi3];        // vac元素                    console.log("        p3:", i3, j3, vacData[i3][j3], cP3);                    var cStr3 = cP3[3];            // 可选数字                    var reSearch = new RegExp("[" + fullStr + "]");                    if(cStr3.length == 2) {                        if(fullStr.indexOf(cStr3[0]) == -1 || fullStr.indexOf(cStr3[1]) == -1) continue;                        if(cStr3.search(reSearch) == -1) continue;                    }                    else if(cStr3.length == fullStr) {                    }                    else continue;                    for(var i4 = rowStart; i4 < rowStart + 3; i4++) for(var j4 = colStart; j4 < colStart + 3; j4++) {                        if((i4 == i && j4 == j) || (i4 == i2 && j4 == j2) || (i4 == i3 && j4 == j3)) continue;                        var cPi4 = vacData[i4][j4];    // vac索引                        if(cPi4 == -1) continue;                        var cP4 = vacancy[cPi4];        // vac元素                        console.log("            p4:", i4, j4, vacData[i4][j4], cP4);                        var cStr4 = cP4[3];            // 可选数字                        for(var n = 0; n < 3; n++) {                            if(cStr4.indexOf(fullStr[n]) == -1) continue;                            historyList.push("三链数删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi3) + ",三格的可选数字是" + fullStr + ",同九宫格的" + getXY(cPi4) + "可选数字" + cStr4 + "中去除数字:" + fullStr[n]);                            vacancy[cPi4][3] = cStr4.replace(fullStr[n], '');                            console.log("            replace:", vacancy[cPi4], fullStr[n]);                        }                    }                }            }        }        console.log(historyList);        return historyList;    }    // XY-Wing    function solveXYwing(vac) {        var rowData = {}, historyList = [];        for(var i = 0; i < 9; i++) {// 遍历每一行            for(var j = 0; j < 9; j++) {// 遍历每一个方格                cPi = vacData[i][j];    // vac索引                if(cPi == -1) continue;                cP = vacancy[cPi];        // vac元素                console.log("row:", i, j, vacData[i][j], cP);                cStr = cP[3];            // 可选数字                if(cStr.length != 2) continue;                for(var k = j + 1; k < 9; k++) {// 取一个方格，向下遍历方格与之匹配                    var wingX, wingY, wingZ;                    cPi2 = vacData[i][k];                    if(cPi2 == -1) continue;                    cP2 = vacancy[cPi2];                    console.log("    row:", i, k, vacData[i][k], cP2);                    cStr2 = cP2[3];                    if(cStr2.length != 2) continue;                    if(cStr2 == cStr || (cStr2.indexOf(cStr[0]) == -1 && cStr2.indexOf(cStr[0]) == -1)) continue;                    if(cStr2.indexOf(cStr[0]) > -1) {                        wingX = cStr[0];                        wingY = cStr[1];                    }                    else {                        wingX = cStr[1];                        wingY = cStr[2];                    }                    wingZ = cStr2.replace(wingX, '');                    for(var i2 = 0; i2 < 9; i2++) {                        if(i == i2) continue;                        cPi3 = vacData[i2][j];                        if(cPi3 == -1) continue;                        cP3 = vacancy[cPi3];                        console.log("        row:", i2, j, vacData[i2][j], cP3);                        cStr3 = cP3[3];                        cPi4 = vacData[i2][k];                        if(cPi4 == -1) continue;                        cP4 = vacancy[cPi4];                        console.log("        row:", i2, k, vacData[i2][k], cP4);                        cStr4 = cP4[3];                        var wingYZ = wingY > wingZ ? wingZ + "" + wingY : wingY + "" + wingZ;                        if(cStr3 == wingYZ) {                            historyList.push("XY-Wing删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi3) + "构成XY-wing删减法条件，" + getXY(cPi4) + "的可选数字" + cStr4 + "中移除数字：" + wingZ);                            vacancy[vacData[i2][k]][3] = cStr4.replace(wingZ, '');                        }                        else if(cStr4 == wingYZ) {                            historyList.push("XY-Wing删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi4) + "构成XY-wing删减法条件，" + getXY(cPi3) + "的可选数字" + cStr3 + "中移除数字：" + wingY);                            vacancy[vacData[i2][j]][3] = cStr4.replace(wingY, '');                        }                    }                }            }        }        for(var i = 0; i < 9; i++) {// 遍历每一列            for(var j = 0; j < 9; j++) {// 遍历每一个方格                cPi = vacData[j][i];    // vac索引                if(cPi == -1) continue;                cP = vacancy[cPi];        // vac元素                console.log(i, j, vacData[j][i], cP);                cStr = cP[3];            // 可选数字                if(cStr.length != 2) continue;                for(var k = j + 1; k < 9; k++) {// 取一个方格，向下遍历方格与之匹配                    var wingX, wingY, wingZ;                    cPi2 = vacData[k][i];                    if(cPi2 == -1) continue;                    cP2 = vacancy[cPi2];                    cStr2 = cP2[3];                    if(cStr2.length != 2) continue;                    if(cStr2 == cStr || (cStr2.indexOf(cStr[0]) == -1 && cStr2.indexOf(cStr[0]) == -1)) continue;                    if(cStr2.indexOf(cStr[0]) > -1) {                        wingX = cStr[0];                        wingY = cStr[1];                    }                    else {                        wingX = cStr[1];                        wingY = cStr[2];                    }                    wingZ = cStr2.replace(wingX, '');                    for(var i2 = 0; i2 < 9; i2++) {                        if(i == i2) continue;                        cPi3 = vacData[j][i2];                        if(cPi3 == -1) continue;                        cP3 = vacancy[cPi3];                        cStr3 = cP3[3];                        cPi4 = vacData[i2][k];                        if(cPi4 == -1) continue;                        cP4 = vacancy[cPi4];                        cStr4 = cP4[3];                        var wingYZ = wingY > wingZ ? wingZ + "" + wingY : wingY + "" + wingZ;                        if(cStr3 == wingYZ) {                            historyList.push("XY-Wing删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi3) + "构成XY-wing删减法条件，" + getXY(cPi4) + "的可选数字" + cStr4 + "中移除数字：" + wingZ);                            vacancy[vacData[k][i2]][3] = cStr4.replace(wingZ, '');                        }                        else if(cStr4 == wingYZ) {                            historyList.push("XY-Wing删减法，" + getXY(cPi) + "," + getXY(cPi2) + "," + getXY(cPi4) + "构成XY-wing删减法条件，" + getXY(cPi3) + "的可选数字" + cStr3 + "中移除数字：" + wingY);                            vacancy[vacData[j][i2]][3] = cStr4.replace(wingY, '');                        }                    }                }            }        }        for(var g33i = 0, rowStart = 0; g33i < 0; ++g33i, rowStart = g33i * 3)        for(var g33j = 0, colStart = 0; g33j < 3; ++g33j, colStart = g33j * 3)        for(var i = rowStart; i < rowStart + 3; i++)        for(var j = colStart; j < colStart + 3; j++) {// 遍历每一个方格            var cPi = vacData[i][j];    // vac索引            if(cPi == -1) continue;            var cP = vacancy[cPi];        // vac元素            if(cP[2] != 0) continue;            console.log("g3 p1:", i, j, vacData[i][j], cP);            var cStr = cP[3];            // 可选数字            if(cStr.length != 2) continue;            for(var i2 = rowStart; i2 < rowStart + 3; i2++) for(var j2 = colStart; j2 < colStart + 3; j2++) {                if(i == i2 && j == j2) continue;                var cPi2 = vacData[i2][j2];    // vac索引                if(cPi2 == -1) continue;                var cP2 = vacancy[cPi2];        // vac元素                if(cP2[2] != 0) continue;                console.log("    p2:", i2, j2, vacData[i2][j2], cP2);                var cStr2 = cP2[3];            // 可选数字                if(cStr2.length != 2 || cStr2 == cStr) continue;                if(cStr2.indexOf(cStr[0]) == -1 && cStr2.indexOf(cStr[1]) == -1) continue;                if(cStr2.indexOf(cStr[0]) > -1) {                    var wingY = cStr[0];                    var wingX = cStr[1];                }                else if(cStr2.indexOf(cStr[1]) > -1) {                    var wingY = cStr[1];                    var wingX = cStr[0];                }                var wingZ = cStr2.replace(new RegExp("[" + cStr + "]"), '');                var selStr = [wingX, wingZ].sort().join('');                // 找同行、同列的XZ                for(var i3 = 0; i3 < 9; i3++) {                    var point4 = [                        vacData[i3, j],                        vacData[i, i3],                        vacData[i3, j2],                        vacData[i2, i3]                    ];                    for(var q = 0; q < 4; q++) {                        if(point4[q] == -1) continue;                        var cPcheck = vacancy[point4[q]];                        if(cPcheck[2] != 0) continue;                        var cStr3 = cPcheck[3];                        if(cStr3 != selStr) continue;                        console.log("        cPcheck:", cPcheck);                        if(cP2[0] > rowStart2 && cP2[0] < rowStart2 + 3) {                            var delNum = cStr3.replace(new RegExp("[" + cStr + "]"), '');                            var rowStart2 = parseInt(cP3[0] / 3) * 3;                            var colStart2 = parseInt(cP3[1] / 3) * 3;                            for(var i4 = colStart2; i4 < colStart2 + 3; i4++) {                                var cPi4 = varData[cP2[0]][i4];                                if(cPi4 == -1) continue;                                var cP4 = vacancy[cPi4];                                if(cP4[2] != 0) continue;                                if(cP4[3].indexOf(delNum) == -1) continue;                                historyList.input();                                vacancy[cPi4][3] = cP4[3].replace(delNum, '');                            }                            for(var i4 = colStart2; i4 < colStart2 + 3; i4++) {                                var cPi4 = varData[cP[0]][i4];                                if(cPi4 == -1) continue;                                var cP4 = vacancy[cPi4];                                if(cP4[2] != 0) continue;                                if(cP4[3].indexOf(delNum) == -1) continue;                                historyList.input();                                vacancy[cPi4][3] = cP4[3].replace(delNum, '');                            }                        }                    }                }            }        }        console.log(historyList);        return historyList;    }    // X-Wing删减法    function solveXwing(vac) {        //    行数、数字、九宫格索引：vacIndex数组        // rowData[0][5]['g00'].push(vi);        //    列数、数字、九宫格索引：vacIndex数组        // colData[0][5]['g00'].push(vi);        var g33 = {}, rowData = {}, colData = {}, gi = "", rI, cI, cC, cSel, repHist = "", historyList = [];        var cDoc = {'g': '九宫格', 'col': "列", 'row': '行'}        for(var vi in vac) {            if(vac[vi][2] != 0) continue;            rI = vac[vi][0];            cI = vac[vi][1];            if(!rowData[rI]) rowData[rI] = {};            if(!colData[cI]) colData[cI] = {};            cSel = vac[vi][3];            for(var i = cSel.length - 1; i >= 0; i--) {                cC = cSel[i];                if(!rowData[rI][cC]) rowData[rI][cC] = [vi];                else rowData[rI][cC].push(vi);                if(!colData[cI][cC]) colData[cI][cC] = [vi];                else colData[cI][cC].push(vi);            }        }        for(var rowN in rowData) for(var num in rowData[rowN]) {            var p = rowData[rowN][num];            if(p.length != 2) continue;            for(var rowN2 in rowData) {                if(rowN2 <= rowN || !rowData[rowN2][num] || rowData[rowN2][num].length != 2) continue;                var p2 = rowData[rowN2][num];                if(vac[p[0]][1] != vac[p2[0]][1] || vac[p[1]][1] != vac[p2[1]][1]) continue;                repHist = "X-Wing删减法，" + getXY(p[0]) + "," + getXY(p[1]) + "," + getXY(p2[0]) + "," + getXY(p2[1]) + ",满足X-Wing删减条件，";                cDoc = p[0] + "," + p[1] + "," + p2[0] + "," + p2[1];                for(var vi in vac) {                    if(vac[vi][2] != 0 || cDoc.indexOf(vi) > -1) continue;                    if(vac[vi][1] != vac[p[0]][1] && vac[vi][1] != vac[p[1]][1]) continue;                    if(vac[vi][3].indexOf(num) > -1) {                        historyList.push(repHist + getXY(vi) + "的可选数字" + vac[vi][3] + "中移除数字：" + num);                        vac[vi][3] = vac[vi][3].replace(num, '');                    }                }            }        }        for(var colN in colData) for(var num in colData[colN]) {            var p = colData[colN][num];            if(p.length != 2) continue;            for(var colN2 in colData) {                if(colN2 <= colN || !colData[colN2][num] || colData[colN2][num].length != 2) continue;                var p2 = colData[colN2][num];                if(vac[p[0]][0] != vac[p2[0]][0] || vac[p[1]][0] != vac[p2[1]][0]) continue;                repHist = "X-Wing删减法，" + getXY(p[0]) + "," + getXY(p[1]) + "," + getXY(p2[0]) + "," + getXY(p2[1]) + ",满足X-Wing删减条件，";                cDoc = p[0] + "," + p[1] + "," + p2[0] + "," + p2[1];                //console.log("x-wing", colN, colN2, num, cDoc);                for(var vi in vac) {                    if(vac[vi][2] != 0 || cDoc.indexOf(vi) > -1) continue;                    if(vac[vi][0] != vac[p[0]][0] && vac[vi][0] != vac[p[1]][0]) continue;                    if(vac[vi][3].indexOf(num) > -1) {                        historyList.push(repHist + getXY(vi) + "的可选数字" + vac[vi][3] + "中移除数字：" + num);                        vac[vi][3] = vac[vi][3].replace(num, '');                    }                }            }        }        return historyList;    }    function solveAreaClean(vac) {        // 九宫推行列        // 九宫格索引、行或列、数字、行数或列数：vacIndex数组        // g33['g00']['row'][3][0].push(vi);        //    行数、数字、九宫格索引：vacIndex数组        // rowData[0][5]['g00'].push(vi);        //    列数、数字、九宫格索引：vacIndex数组        // colData[0][5]['g00'].push(vi);        var g33 = {}, rowData = {}, colData = {}, gi = "", rI, cI, cC, cSel, repHist = "", historyList = [];        var cDoc = {'g': '九宫格', 'col': "列", 'row': '行'}        for(var vi in vac) {            if(vac[vi][2] != 0) continue;            gi = "g" + parseInt(vac[vi][0] / 3) + parseInt(vac[vi][1] / 3);            rI = vac[vi][0];            cI = vac[vi][1];            if(!g33[gi]) g33[gi] = {'row':{}, 'col':{}};            if(!rowData[rI]) rowData[rI] = {};            if(!colData[cI]) colData[cI] = {};            cSel = vac[vi][3];            for(var i = cSel.length - 1; i >= 0; i--) {                cC = cSel[i];                if(!g33[gi]['row'][cC]) g33[gi]['row'][cC] = {};                if(!g33[gi]['row'][cC][vac[vi][0]]) g33[gi]['row'][cC][vac[vi][0]] = [vi];                else g33[gi]['row'][cC][vac[vi][0]].push(vi);                if(!g33[gi]['col'][cC]) g33[gi]['col'][cC] = {};                if(!g33[gi]['col'][cC][vac[vi][1]]) g33[gi]['col'][cC][vac[vi][1]] = [vi];                else g33[gi]['col'][cC][vac[vi][1]].push(vi);                if(!rowData[rI][cC]) rowData[rI][cC] = {};                if(!rowData[rI][cC][gi]) rowData[rI][cC][gi] = [vi];                else rowData[rI][cC][gi].push(vi);                if(!colData[cI][cC]) colData[cI][cC] = {};                if(!colData[cI][cC][gi]) colData[cI][cC][gi] = [vi];                else colData[cI][cC][gi].push(vi);            }        }    }    // 候选数区块删减法    function solveAreaClean(vac) {        // 九宫推行列        // 九宫格索引、行或列、数字、行数或列数：vacIndex数组        // g33['g00']['row'][3][0].push(vi);        //    行数、数字、九宫格索引：vacIndex数组        // rowData[0][5]['g00'].push(vi);        //    列数、数字、九宫格索引：vacIndex数组        // colData[0][5]['g00'].push(vi);        var g33 = {}, rowData = {}, colData = {}, gi = "", rI, cI, cC, cSel, repHist = "", historyList = [];        var cDoc = {'g': '九宫格', 'col': "列", 'row': '行'}        for(var vi in vac) {            if(vac[vi][2] != 0) continue;            gi = "g" + parseInt(vac[vi][0] / 3) + parseInt(vac[vi][1] / 3);            rI = vac[vi][0];            cI = vac[vi][1];            if(!g33[gi]) g33[gi] = {'row':{}, 'col':{}};            if(!rowData[rI]) rowData[rI] = {};            if(!colData[cI]) colData[cI] = {};            cSel = vac[vi][3];            for(var i = cSel.length - 1; i >= 0; i--) {                cC = cSel[i];                if(!g33[gi]['row'][cC]) g33[gi]['row'][cC] = {};                if(!g33[gi]['row'][cC][vac[vi][0]]) g33[gi]['row'][cC][vac[vi][0]] = [vi];                else g33[gi]['row'][cC][vac[vi][0]].push(vi);                if(!g33[gi]['col'][cC]) g33[gi]['col'][cC] = {};                if(!g33[gi]['col'][cC][vac[vi][1]]) g33[gi]['col'][cC][vac[vi][1]] = [vi];                else g33[gi]['col'][cC][vac[vi][1]].push(vi);                if(!rowData[rI][cC]) rowData[rI][cC] = {};                if(!rowData[rI][cC][gi]) rowData[rI][cC][gi] = [vi];                else rowData[rI][cC][gi].push(vi);                if(!colData[cI][cC]) colData[cI][cC] = {};                if(!colData[cI][cC][gi]) colData[cI][cC][gi] = [vi];                else colData[cI][cC][gi].push(vi);            }        }        var cArr = [], cSel = "";        for(var gi in g33) for(var rc in g33[gi]) for(var sn in g33[gi][rc]) {            if(Object.keys(g33[gi][rc][sn]).length != 1) continue;            //console.log(gi, rc, sn, g33[gi][rc][sn]);            cArr = Object.values(g33[gi][rc][sn])[0];            cSel = cArr.join(",");            repHist = "候选数区块删减法，";            for(var i in cArr) {                repHist += "[" + rowDoc[vac[cArr[i]][0]] + "," + colDoc[vac[cArr[i]][1]] + "]，";            }            repHist += "中的数字" + sn + "只在所在九宫格的";            if(rc == 'row') {                cX = vac[cArr[0]][0];                for(var vi in vac) {                    if(vac[vi][2] != 0 ||                         vac[vi][0] != cX ||                         cSel.indexOf(vi) > -1 ||                         vac[vi][3].indexOf(sn) == -1) continue;                    historyList.push(repHist + rowDoc[vac[cArr[0]][0]] + "行在，同行的[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]的可选数字" + vac[vi][3] + "中去除：" + sn);                    vac[vi][3] = vac[vi][3].replace(sn, '');                }            }            else {                cY = vac[cArr[0]][1];                for(var vi in vac) {                    if(vac[vi][2] != 0 ||                         vac[vi][1] != cY ||                         cSel.indexOf(vi) > -1 ||                         vac[vi][3].indexOf(sn) == -1) continue;                    historyList.push(repHist + colDoc[vac[cArr[0]][1]] + "列存在，同列的[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]的可选数字" + vac[vi][3] + "中去除：" + sn);                    vac[vi][3] = vac[vi][3].replace(sn, '');                }            }        }        for(rI in rowData) for(var sn in rowData[rI]) {            if(Object.keys(rowData[rI][sn]).length != 1) continue;            cArr = Object.values(rowData[rI][sn])[0];            cSel = cArr.join(",");            repHist = "候选数区块删减法，";            for(var i in cArr) {                repHist += "[" + rowDoc[vac[cArr[i]][0]] + "," + colDoc[vac[cArr[i]][1]] + "]，";            }            repHist += "所在的" + rowDoc[vac[cArr[0]][0]] + "行中的数字" + sn + "只在一个九宫格中，该九宫格中的";            var rowStart = parseInt(vac[cArr[0]][0] / 3) * 3;            var colStart = parseInt(vac[cArr[0]][1] / 3) * 3;            for(var vi in vac) {                if(vac[vi][2] != 0 ||                     vac[vi][0] < rowStart ||                     vac[vi][0] >= rowStart + 3 ||                    vac[vi][1] < colStart ||                     vac[vi][1] >= colStart + 3 ||                     cSel.indexOf(vi) > -1 ||                    vac[vi][3].indexOf(sn) == -1 ) continue;                    historyList.push(repHist + "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]的可选数字" + vac[vi][3] + "中去除：" + sn);                    vac[vi][3] = vac[vi][3].replace(sn, '');            }        }        for(rI in colData) for(var sn in colData[rI]) {            if(Object.keys(colData[rI][sn]).length != 1) continue;            cArr = Object.values(colData[rI][sn])[0];            cSel = cArr.join(",");            repHist = "候选数区块删减法，";            for(var i in cArr) {                repHist += "[" + rowDoc[vac[cArr[i]][0]] + "," + colDoc[vac[cArr[i]][1]] + "]，";            }            repHist += "所在的" + colDoc[vac[cArr[0]][1]] + "列中的数字" + sn + "只在一个九宫格中，该九宫格中的";            var rowStart = parseInt(vac[cArr[0]][0] / 3) * 3;            var colStart = parseInt(vac[cArr[0]][1] / 3) * 3;            for(var vi in vac) {                if(vac[vi][2] != 0 ||                     vac[vi][0] < rowStart ||                     vac[vi][0] >= rowStart + 3 ||                    vac[vi][1] < colStart ||                     vac[vi][1] >= colStart + 3 ||                     cSel.indexOf(vi) > -1 ||                    vac[vi][3].indexOf(sn) == -1 ) continue;                    historyList.push(repHist + "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]的可选数字" + vac[vi][3] + "中去除：" + sn);                    vac[vi][3] = vac[vi][3].replace(sn, '');            }        }        //console.log(historyList);        return historyList;        //console.log(JSON.stringify(g33, null, 4));    }    // 基础摒弃法    function solveBaseAban(vac) {        var rowData = {}, colData = {}, g33 = {}, gi = "", cSel;        for(var vi in vac) {            if(vac[vi][2] != 0) continue;            gi = "g" + parseInt(vac[vi][0] / 3) + parseInt(vac[vi][1] / 3);            if(!g33[gi]) g33[gi] = {};            if(!rowData[vac[vi][0]]) rowData[vac[vi][0]] = {};            if(!colData[vac[vi][1]]) colData[vac[vi][1]] = {};            cSel = vac[vi][3];            // g33['g00'][3] = [33,39,42]            for(var i = cSel.length - 1; i >= 0; i--) {                if(!g33[gi][cSel[i]]) g33[gi][cSel[i]] = [];                g33[gi][cSel[i]].push(vi);                if(!rowData[vac[vi][0]][cSel[i]]) rowData[vac[vi][0]][cSel[i]] = [];                rowData[vac[vi][0]][cSel[i]].push(vi);                if(!colData[vac[vi][1]][cSel[i]]) colData[vac[vi][1]][cSel[i]] = [];                colData[vac[vi][1]][cSel[i]].push(vi);            }        }        for(gi in g33) for(var num in g33[gi]) {            if(g33[gi][num].length != 1) continue;            var vi = g33[gi][num][0];            return [vac[vi][0], vac[vi][1], num, 'baseAban', 'g', vi];            break;        }        for(var row in rowData) for(var num in rowData[row]) {            if(rowData[row][num].length != 1) continue;            var vi = rowData[row][num][0];            return [vac[vi][0], vac[vi][1], num, 'baseAban', 'row', vi];            break;        }        for(var col in colData) for(var num in colData[col]) {            if(colData[col][num].length != 1) continue;            var vi = colData[col][num][0];            return [vac[vi][0], vac[vi][1], num, 'baseAban', 'col', vi];            break;        }        //console.log(g33, rowData, colData);        return [-1, -1];    }    // 隐性候选数对删减法（鸳鸯）    function solveYuanyangHidden (vac) {        var rowN, colN, gN, selStr = "", rowData = {}, colData = {}, g33 = {};        var rowStr = {}, colStr = {}, gStr = {}, vacArr = [], historyList = [];        //       行号、数字::indexVac数组        // rowData[0][3].push(vi)        for(var vi in vac) {            if(vac[vi][2] != 0) continue;            rowN = vac[vi][0];            colN = vac[vi][1];            gN = 'g' + parseInt(rowN / 3) + parseInt(colN / 3);            if(!rowData[rowN]) rowData[rowN] = {};            if(!colData[colN]) colData[colN] = {};            if(!g33[gN]) g33[gN] = {};            //console.log(rowN, colN, gN, JSON.stringify(vac[vi]));            for(var si = vac[vi][3].length - 1; si >= 0; si--) {                selStr = vac[vi][3][si];                if(!rowData[rowN][selStr]) rowData[rowN][selStr] = [];                rowData[rowN][selStr].push(vi);                if(!colData[colN][selStr]) colData[colN][selStr] = [];                colData[colN][selStr].push(vi);                if(!g33[gN][selStr]) g33[gN][selStr] = [];                g33[gN][selStr].push(vi);            }        }        for(var rowN in rowData) for(var sn in rowData[rowN]) {            if(rowData[rowN][sn].length == 2) {                selStr = rowData[rowN][sn].join(',');                if(!rowStr[rowN]) rowStr[rowN] = {};                if(!rowStr[rowN][selStr]) rowStr[rowN][selStr] = []                rowStr[rowN][selStr].push(sn);            }        }        for(var colN in colData) for(var sn in colData[colN]) {            if(colData[colN][sn].length == 2) {                selStr = colData[colN][sn].join(',');                if(!colStr[colN]) colStr[colN] = {};                if(!colStr[colN][selStr]) colStr[colN][selStr] = [];                colStr[colN][selStr].push(sn);            }        }        for(var gN in g33) for(var sn in g33[gN]) {            if(g33[gN][sn].length == 2) {                selStr = g33[gN][sn].join(',');                if(!gStr[gN]) gStr[gN] = {};                if(!gStr[gN][selStr]) gStr[gN][selStr] = [];                gStr[gN][selStr].push(sn);            }        }        var repHist = "";        for(var rowN in rowStr) for(var selStr in rowStr[rowN]) {            if(rowStr[rowN][selStr].length != 2) continue;            //console.log("row:", rowN, selStr, rowStr[rowN][selStr]);            var numStr = rowStr[rowN][selStr].join(',');            vacArr = selStr.split(',');            repHist = "隐性候选数对删减法，" + numStr + "在" + rowDoc[vac[vacArr[0][0]][0]] + "行只存在于";            for(var rc in vacArr) {                var vi = vacArr[rc];                repHist += "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]，";            }            repHist += "所以";            for(var i = 0; i < 2; i++) {                var str = vac[vacArr[i]][3];                for(var j = str.length - 1; j >= 0; j--) {                    if(numStr.indexOf(str[j]) == -1) {                        historyList.push(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        //console.log(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        vac[vacArr[i]][3] = str = str.replace(str[j], '');                        //console.log(vac[vacArr[i]]);                    }                }            }        }        for(var colN in colStr) for(var selStr in colStr[colN]) {            if(colStr[colN][selStr].length != 2) continue;            //console.log("col:", colN, selStr, colStr[colN][selStr]);            var numStr = colStr[colN][selStr].join(',');            vacArr = selStr.split(',');            repHist = "隐性候选数对删减法，" + numStr + "在" + colDoc[vac[vacArr[0][0]][1]] + "列只存在于";            for(var rc in vacArr) {                var vi = vacArr[rc];                repHist += "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]，";            }            repHist += "所以";            for(var i = 0; i < 2; i++) {                var str = vac[vacArr[i]][3];                for(var j = str.length - 1; j >= 0; j--) {                    if(numStr.indexOf(str[j]) == -1) {                        historyList.push(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        //console.log(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        vac[vacArr[i]][3] = str = str.replace(str[j], '');                        //console.log(vac[vacArr[i]]);                    }                }            }        }        for(var gN in gStr) for(var selStr in gStr[gN]) {            if(gStr[gN][selStr].length != 2) continue;            //console.log("g3:", gN, selStr, gStr[gN][selStr]);            var numStr = gStr[gN][selStr].join(',');            vacArr = selStr.split(',');            repHist = "隐性候选数对删减法，" + numStr + "在[" + rowDoc[vac[vacArr[0]][0]] + "," + colDoc[vac[vacArr[0]][1]] + "]所在九宫格只存在于";            for(var rc in vacArr) {                var vi = vacArr[rc];                repHist += "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]，";            }            repHist += "所以";            for(var i = 0; i < 2; i++) {                var str = vac[vacArr[i]][3];                for(var j = str.length - 1; j >= 0; j--) {                    if(numStr.indexOf(str[j]) == -1) {                        historyList.push(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        //console.log(repHist + "[" + rowDoc[vac[vacArr[i]][0]] + "," + colDoc[vac[vacArr[i]][1]] + "]的可选数字" + str + "中去除：" + str[j]);                        vac[vacArr[i]][3] = str = str.replace(str[j], '');                        //console.log(vac[vacArr[i]]);                    }                }            }        }        //console.log(historyList);        return historyList;    }    // 候选数对删减法（鸳鸯），包括三数集删减法, 目前存在缺陷，出现类似234,234,23 时无法判断    function solveYuanyang (vac) {        var rowC = {}, colC = {}, g33 = {}, sk, ix, iy, i9, historyList = [];        for(var i in vac) {            if(vac[i][2] != 0) continue;            sk = vac[i][3];            ix = vac[i][0];            iy = vac[i][1];            if(!rowC[ix]) rowC[ix] = {};            if(!rowC[ix][sk]) {                rowC[ix][sk] = [i];            }            else {                rowC[ix][sk].push(i);            }            if(!colC[iy]) colC[iy] = {};            if(!colC[iy][sk]) {                colC[iy][sk] = [i];            }            else {                colC[iy][sk].push(i);            }            i9 = "g" + parseInt(vac[i][0] / 3) + parseInt(vac[i][1] / 3);            if(!g33[i9]) g33[i9] = {};            if(!g33[i9][sk]) {                g33[i9][sk] = [i];            }            else {                g33[i9][sk].push(i);            }        }        // console.log("row:", rowC);        // console.log("col:", colC);        // console.log("i9:", g33);        var repRs = [];        var repHist = "";        var cDoc = "";        var cH = "";        for(var i in rowC) {// 行，x            for(var k in rowC[i]) {// 备选, k 为备选                if(k.length < 2 || k.length != rowC[i][k].length) continue;                cDoc = "";                repHist = "候选数对删减法，在" + rowDoc[i] + "行存在数对" + k + "，";                for(var rc in rowC[i][k]) {                    vi = rowC[i][k][rc];                    //console.log(rc, ":", rowC[i][k][rc]);                    repHist += "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]，";                    cDoc += vac[vi][1];                }                //console.log(rowC[i][k], cDoc, repHist);                for(var vk in vac) {                    // 遍历所有的空块，同行的，如果存在就替换                    if(vac[vk][2] == 0 && vac[vk][0] == i && cDoc.indexOf(vac[vk][1]) == -1) {                        for(var ind = k.length - 1; ind >= 0; ind--) {                            cH = repHist + "该行[" + rowDoc[vac[vk][0]] + "," + colDoc[vac[vk][1]] + "]可选数" + vac[vk][3] + "中去除" + k[ind];                            repRs = existDelete(vac[vk][3], k[ind]);                            if(repRs[0] > -1) {                                vac[vk][3] = repRs[1];                                historyList.push(cH);                            }                        }                    }                }            }        }        //console.log("row:", historyList, colC);        for(var i in colC) {// 列，x            for(var k in colC[i]) {// 备选, k 为备选                if(k.length < 2 || k.length != colC[i][k].length) continue;                cDoc = "";                repHist = "候选数对删减法，在" + colDoc[i] + "列存在数对" + k + "，";                for(var rc in colC[i][k]) {                    vi = colC[i][k][rc];                    //console.log(rc, ":", colC[i][k][rc]);                    repHist += "(" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + ")，";                    cDoc += vi + ",";                }                //console.log(colC[i][k], cDoc, repHist);                for(var vk in vac) {                    // 遍历所有的空块，同列的，如果存在就替换                    if(vac[vk][2] == 0 && vac[vk][1] == i && cDoc.indexOf(vk) == -1) {                        //console.log("find exist:", vac[vk]);                        for(var ind = k.length - 1; ind >= 0; ind--) {                            cH = repHist + "该列[" + rowDoc[vac[vk][0]] + "," + colDoc[vac[vk][1]] + "]可选数" + vac[vk][3] + "中去除" + k[ind];                            repRs = existDelete(vac[vk][3], k[ind]);                            if(repRs[0] > -1) {                                vac[vk][3] = repRs[1];                                historyList.push(cH);                            }                        }                    }                }            }        }        //console.log("col:", historyList);        var xStart, yStart;        for(var i in g33) {// 列，x            for(var k in g33[i]) {// 备选, k 为备选                if(k.length < 2 || k.length != g33[i][k].length) continue;                cDoc = "";                repHist = "候选数对删减法，在" + i + "宫格中存在数对" + k + "，";                for(var rc in g33[i][k]) {                    vi = g33[i][k][rc];                    //console.log(rc, ":", g33[i][k][rc], vac[vi]);                    repHist += "[" + rowDoc[vac[vi][0]] + "," + colDoc[vac[vi][1]] + "]，";                    cDoc += vi + ",";                }                xStart = parseInt(vac[g33[i][k][0]][0] / 3) * 3;                yStart = parseInt(vac[g33[i][k][0]][1] / 3) * 3;                //console.log(g33[i][k], cDoc, repHist, xStart, yStart, g33[i][k][0]);                for(var vk in vac) {                    // 遍历所有的空块，同行的，如果存在就替换                    if(                        vac[vk][2] == 0 &&                         (                            vac[vk][0] >= xStart &&                             vac[vk][0] < xStart + 3 &&                             vac[vk][1] >= yStart &&                             vac[vk][1] < yStart + 3                            ) &&                         cDoc.indexOf(vk) == -1                        )                    {                        for(var ind = k.length - 1; ind >= 0; ind--) {                            cH = repHist + "该九宫格[" + rowDoc[vac[vk][0]] + "," + colDoc[vac[vk][1]] + "]可选数" + vac[vk][3] + "中去除" + k[ind];                            repRs = existDelete(vac[vk][3], k[ind]);                            //console.log(cH, repRs, vac[vk]);                            if(repRs[0] > -1) {                                vac[vk][3] = repRs[1];                                historyList.push(cH);                            }                        }                    }                }            }        }        //console.log("g33:", historyList);        return historyList;    }    // 隐式唯一候选数法    function solveEndPointHidden (vac) {        for(var i in vac) {            //console.log("check:", vac[i]);            if(vac[i][2] != 0 || vac[i][3].length > 1) continue;            //console.log("fire:", vac[i]);            vacancy[i][2] = parseInt(vac[i][3]);            //console.log("change:", vac[i]);            return [vac[i][0], vac[i][1], vac[i][2], 'endpoint', 'h', i];            break;        }        return [-1, -1];    }    // 唯一候选数法    function solveEndPoint(data) {        var rowData = {}, colData = {}, g33 = {}, gi = "";        for(var vi in vacancy) {            if(vacancy[vi][2] != 0) continue;            gi = "g" + parseInt(vacancy[vi][0] / 3) + parseInt(vacancy[vi][1] / 3);            if(!g33[gi]) g33[gi] = [];            if(!rowData[vacancy[vi][0]]) rowData[vacancy[vi][0]] = [];            if(!colData[vacancy[vi][1]]) colData[vacancy[vi][1]] = [];            g33[gi].push(vi);            rowData[vacancy[vi][0]].push(vi);            colData[vacancy[vi][1]].push(vi);        }        for(gi in g33) {            if(g33[gi].length != 1) continue;            var vi = g33[gi][0];            return [vacancy[vi][0], vacancy[vi][1], vacancy[vi][3], 'endpoint', 'g', vi];            break;        }        for(var i in rowData) {            if(rowData[i].length != 1) continue;            var vi = rowData[i][0];            return [vacancy[vi][0], vacancy[vi][1], vacancy[vi][3], 'endpoint', 'row', vi];            break;        }        for(var i in colData) {            if(colData[i].length != 1) continue;            var vi = colData[i][0];            return [vacancy[vi][0], vacancy[vi][1], vacancy[vi][3], 'endpoint', 'col', vi];            break;        }        // console.log(g33, rowData, colData);        return [-1, -1];    }</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近学习算法，就拿数独解题试刀吧。^_^&lt;/p&gt;
&lt;style&gt;.sudokuLeft{padding: 0px 5px 0px 0px;line-height: 42px;}.sudokuFooter,.sudokuLeft{margin:0px;font-size: 2
      
    
    </summary>
    
    
      <category term="数独" scheme="http://yuenshui.com/tags/%E6%95%B0%E7%8B%AC/"/>
    
      <category term="Javascript" scheme="http://yuenshui.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Node.js实现sleep的几种办法</title>
    <link href="http://yuenshui.com/2017/02/26/Node-js-sleep/"/>
    <id>http://yuenshui.com/2017/02/26/Node-js-sleep/</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-02-26T09:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究Node.js应用的稳定性和性能优化，发现测试时会用到故意延迟或卡顿的场景。度娘搜了一下有不少实现sleep的方式，顺便总结一下，分享给各位看官。</p><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">sleepTime</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>; +<span class="keyword">new</span> <span class="built_in">Date</span> - start &lt;= sleepTime;) &#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">sleep(<span class="number">3000</span>);</div><div class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(t2 - t1);</div></pre></td></tr></table></figure><p>这是最简单粗暴的实现，确实sleep了，也确实卡死了，CPU会飙升，无论你的服务器CPU有多么Niubility。</p><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'asyncawait/async'</span>);</div><div class="line"><span class="keyword">var</span> <span class="keyword">await</span> = <span class="built_in">require</span>(<span class="string">'asyncawait/await'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms))</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="keyword">async</span>(</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">await</span>(sleep(<span class="number">3000</span>));</div><div class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(t2 - t1);</div><div class="line">&#125;</div><div class="line">))();</div></pre></td></tr></table></figure><p>缺陷是程序需要在async域里执行。等ES7出来后会有原生的await/async可用，不用引入asyncawait模块了。<br>优点是，这种方式实际上是用了setTimeout，没有形成进程阻塞，不会造成性能和负载问题。</p><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">milliSeconds</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">setTimeout(done, milliSeconds);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">yield</span> sleep(<span class="number">3000</span>);</div><div class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(t2 - t1);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>目前generator在开发中应用的越来越多，尤其是koa在更多的业务中使用之后。缺点和async一样，必须在generator的域里才可使用。优点和上例相同。</p><h2 id="addon"><a href="#addon" class="headerlink" title="addon"></a>addon</h2><p>这里有C++实现的模块：<a href="https://github.com/ErikDubbelboer/node-sleep" target="_blank" rel="external">https://github.com/ErikDubbelboer/node-sleep</a></p><ul><li>sleep.sleep(n): sleep for n seconds</li><li>sleep.msleep(n): sleep for n miliseconds</li><li>sleep.usleep(n): sleep for n microseconds (1 second is 1000000 microseconds)<br>能够实现更加精细的时间精确度。缺点需要安装这个模块，^_^，这也许算不上什么缺点。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面4种实现方法，各有优略表现最好的是用C++实现的模块，最简单的实现是死循环，对于不同的业务和应用场景，就看大家喜欢哪种方式了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/31636244" target="_blank" rel="external">https://www.zhihu.com/question/31636244</a><br><a href="http://www.zhouhua.info/2015/03/04/sleep/" target="_blank" rel="external">http://www.zhouhua.info/2015/03/04/sleep/</a><br><a href="https://github.com/ErikDubbelboer/node-sleep" target="_blank" rel="external">https://github.com/ErikDubbelboer/node-sleep</a></p><p><strong> 注意：本站博文均系原创，欢迎转载，请注明出处和原网址 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究Node.js应用的稳定性和性能优化，发现测试时会用到故意延迟或卡顿的场景。度娘搜了一下有不少实现sleep的方式，顺便总结一下，分享给各位看官。&lt;/p&gt;
&lt;h2 id=&quot;死循环&quot;&gt;&lt;a href=&quot;#死循环&quot; class=&quot;headerlink&quot; title=&quot;死
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yuenshui.com/tags/Node-js/"/>
    
      <category term="sleep" scheme="http://yuenshui.com/tags/sleep/"/>
    
  </entry>
  
  <entry>
    <title>让Node.js程序稳定运行</title>
    <link href="http://yuenshui.com/2017/02/25/How-to-make-the-node-js-application-run-stably/"/>
    <id>http://yuenshui.com/2017/02/25/How-to-make-the-node-js-application-run-stably/</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-02-26T09:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-make-the-node-js-application-run-stably"><a href="#How-to-make-the-node-js-application-run-stably" class="headerlink" title="How to make the node.js application run stably"></a>How to make the node.js application run stably</h2><p>Node.js程序在越来越多的公司部署在生产环境，程序的稳定运行逐渐被大家所关注。下面我就分享一下这方面的经验，仅供参考。</p><h2 id="一、捕获错误"><a href="#一、捕获错误" class="headerlink" title="一、捕获错误"></a>一、捕获错误</h2><h3 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h3><p>try语句捕获错误是Javascript在网页或服务器上最常见也是最简单的捕获错误方式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 业务代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line"><span class="comment">// 异常时执行的代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line"><span class="comment">// 最后执行的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这种方式适用于当前执行的代码，语法错误，变量使用异常等情况的异常捕获。但是对于函数、对象里的异常，是无法捕获的。比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(testVar.toString());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div><div class="line">testFun();</div></pre></td></tr></table></figure></p><p>如果你们觉得会运行“console.log(testVar.toString())”时捕获到变量未初始化，那就错了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node test001.js</div><div class="line">run finally</div><div class="line">/Users/yuenshui/Documents/website/nodejs/test001.js:9</div><div class="line">       console.log(testVar.toString());</div><div class="line">                          ^</div><div class="line"></div><div class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">'toString'</span> of undefined</div><div class="line">    at testFun (/Users/yuenshui/Documents/website/nodejs/test001.js:9:29)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/yuenshui/Documents/website/nodejs/test001.js:19:1)</div><div class="line">    at Module._compile (module.js:409:26)</div><div class="line">    at Object.Module._extensions..js (module.js:416:10)</div><div class="line">    at Module.load (module.js:343:32)</div><div class="line">    at Function.Module._load (module.js:300:12)</div><div class="line">    at Function.Module.runMain (module.js:441:10)</div><div class="line">    at startup (node.js:139:18)</div><div class="line">    at node.js:968:3</div></pre></td></tr></table></figure></p><p>程序执行到这里就会闪退(Crash)。</p><p>解决办法是，在执行的地方捕获错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(testVar.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">testFun();</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node test001.js</div><div class="line">run catch [TypeError: Cannot <span class="built_in">read</span> property <span class="string">'toString'</span> of undefined]</div><div class="line">run finally</div></pre></td></tr></table></figure></p><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p>如上例，只要在使用变量前加上类型判断，就不会出现程序异常。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> testVar != <span class="string">'undefined'</span>) &#123;</div><div class="line"><span class="built_in">console</span>.log(testVar.toString());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">testFun();</div></pre></td></tr></table></figure></p><p>像这样的情况，一般的熟手都能做的很好，不用依赖try捕获异常来保证稳定运行。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>如果认为上面两个例子通过判断类型避免异常和try语句捕获异常就能解决异常的出现，那就错误。因为还有异步的存在（^_^ 天刹的异步），异步执行的代码中如果产生异常，调用阶段使用try是没意义的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">fs.readFile(<span class="string">"./abc.bin"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">testFun(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node test013.js                            </div><div class="line">module.js:327</div><div class="line">    throw err;</div><div class="line">    ^</div><div class="line"></div><div class="line">Error: Cannot find module <span class="string">'/Users/yuenshui/Documents/website/nodejs/test013.js'</span></div><div class="line">    at Function.Module._resolveFilename (module.js:325:15)</div><div class="line">    at Function.Module._load (module.js:276:25)</div><div class="line">    at Function.Module.runMain (module.js:441:10)</div><div class="line">    at startup (node.js:139:18)</div><div class="line">    at node.js:968:3</div></pre></td></tr></table></figure></p><p>异步下可以使用Promise捕获：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">fs.readFile(<span class="string">"./test.txt"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(err) reject(err);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">resolve(data);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">testFun()</div><div class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"then:"</span>, data.toString());</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"catch:"</span>, err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs/chat&gt; node test015.js</div><div class="line">catch: &#123; [Error: ENOENT: no such file or directory, open <span class="string">'./test.txt'</span>] errno: -2, code: <span class="string">'ENOENT'</span>, syscall: <span class="string">'open'</span>, path: <span class="string">'./test.txt'</span> &#125;</div></pre></td></tr></table></figure></p><h3 id="使用domain"><a href="#使用domain" class="headerlink" title="使用domain"></a>使用domain</h3><p>这是官方给的一个例子，在用domain创建的域里执行程序，将会捕获到程序的错误。<br>官方给的解释是：domain提供了将多个不同IO操作作为单个组处理的方式。如果任何注册到域的事件发射器或回调函数发出“error”事件或者抛出一个错误，那么将通知域对象，而不是直接让这个错误的上下文从process.on(‘uncaughtException’)处理程序中丢失掉，甚至程序立即退出并显示错误代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="built_in">require</span>(<span class="string">'domain'</span>).create();</div><div class="line">d.on(<span class="string">'error'</span>, (er) =&gt; &#123;</div><div class="line">  <span class="comment">// The error won't crash the process, but what it does is worse!</span></div><div class="line">  <span class="comment">// Though we've prevented abrupt process restarting, we are leaking</span></div><div class="line">  <span class="comment">// resources like crazy if this ever happens.</span></div><div class="line">  <span class="comment">// This is no better than process.on('uncaughtException')!</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'error, but oh well'</span>, er.message);</div><div class="line">&#125;);</div><div class="line">d.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    handleRequest(req, res);</div><div class="line">  &#125;).listen(PORT);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="uncaughtException-事件"><a href="#uncaughtException-事件" class="headerlink" title="uncaughtException 事件"></a>uncaughtException 事件</h3><p>通过process的uncaughtException事件，来处理未捕获的异常。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'catch fatal error: '</span> + err.stack || err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="二、进程守护"><a href="#二、进程守护" class="headerlink" title="二、进程守护"></a>二、进程守护</h2><h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><p>官网：<a href="http://pm2.keymetrics.io/" target="_blank" rel="external">http://pm2.keymetrics.io/</a><br>PM2是一个进程管理器，在进程闪退后立即重启该进程，起到了守护作用，并且记录error_log，用于错误分析。<br>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ npm install pm2 -g     <span class="comment"># 命令行安装 pm2 </span></div><div class="line">$ pm2 start app.js -i 4 <span class="comment">#后台运行pm2，启动4个app.js </span></div><div class="line">                                <span class="comment"># 也可以把'max' 参数传递给 start</span></div><div class="line">                                <span class="comment"># 正确的进程数目依赖于Cpu的核心数目</span></div><div class="line">$ pm2 start app.js --name my-api <span class="comment"># 命名进程</span></div><div class="line">$ pm2 list               <span class="comment"># 显示所有进程状态</span></div><div class="line">$ pm2 monit              <span class="comment"># 监视所有进程</span></div><div class="line">$ pm2 logs               <span class="comment">#  显示所有进程日志</span></div><div class="line">$ pm2 stop all           <span class="comment"># 停止所有进程</span></div><div class="line">$ pm2 restart all        <span class="comment"># 重启所有进程</span></div><div class="line">$ pm2 reload all         <span class="comment"># 0秒停机重载进程 (用于 NETWORKED 进程)</span></div><div class="line">$ pm2 stop 0             <span class="comment"># 停止指定的进程</span></div><div class="line">$ pm2 restart 0          <span class="comment"># 重启指定的进程</span></div><div class="line">$ pm2 startup            <span class="comment"># 产生 init 脚本 保持进程活着</span></div><div class="line">$ pm2 web                <span class="comment"># 运行健壮的 computer API endpoint (http://localhost:9615)</span></div><div class="line">$ pm2 delete 0           <span class="comment"># 杀死指定的进程</span></div><div class="line">$ pm2 delete all         <span class="comment"># 杀死全部进程</span></div><div class="line"></div><div class="line">运行进程的不同方式：</div><div class="line">$ pm2 start app.js -i max  <span class="comment"># 根据有效CPU数目启动最大进程数目</span></div><div class="line">$ pm2 start app.js -i 3      <span class="comment"># 启动3个进程</span></div><div class="line">$ pm2 start app.js -x        <span class="comment">#用fork模式启动 app.js 而不是使用 cluster</span></div><div class="line">$ pm2 start app.js -x -- -a 23   <span class="comment"># 用fork模式启动 app.js 并且传递参数 (-a 23)</span></div><div class="line">$ pm2 start app.js --name serverone  <span class="comment"># 启动一个进程并把它命名为 serverone</span></div><div class="line">$ pm2 stop serverone       <span class="comment"># 停止 serverone 进程</span></div><div class="line">$ pm2 start app.json        <span class="comment"># 启动进程, 在 app.json里设置选项</span></div><div class="line">$ pm2 start app.js -i max -- -a 23                   <span class="comment">#在--之后给 app.js 传递参数</span></div><div class="line">$ pm2 start app.js -i max -e err.log -o out.log  <span class="comment"># 启动 并 生成一个配置文件</span></div><div class="line">你也可以执行用其他语言编写的app  ( fork 模式):</div><div class="line">$ pm2 start my-bash-script.sh    -x --interpreter bash</div><div class="line">$ pm2 start my-python-script.py -x --interpreter python</div></pre></td></tr></table></figure></p><h3 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h3><p>官网：<a href="https://github.com/foreverjs/forever" target="_blank" rel="external">https://github.com/foreverjs/forever</a><br>从功能上来看，个人感觉不如PM2全面和完善，具体的网上有很多教程和资料，就不赘述了。</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="node-inspector"><a href="#node-inspector" class="headerlink" title="node-inspector"></a>node-inspector</h3><p>这个模块提供了基于V8分析器的调试接口，配合chrome浏览器，可以直观的浏览运行时内存。<br>用于分析业务中可能的缺陷很有帮助。<br>安装并运行node-inspector<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; node --debug app.js</div><div class="line">&gt; node-inspector</div><div class="line">Node Inspector v0.12.8</div><div class="line">Visit http://127.0.0.1:8080/?port=5858 to start debugging.</div></pre></td></tr></table></figure></p><p>运行需要调试的项目，加“—-debug”参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; node —-debug app.js</div><div class="line">Debugger listening on [::]:5858</div></pre></td></tr></table></figure><p>chrome 打开  <a href="http://127.0.0.1:8080/?port=5858" target="_blank" rel="external">http://127.0.0.1:8080/?port=5858</a> 就可以看到调试界面。<br>点击“Profiles”，选择“Take Heap Snapshor” 点击 “Take Snapshot”就可以浏览运行时内存数据了。<br><img src="/img/node-take-snapshot.png" alt="Node.js Take Snapshot"></p><h3 id="node-memwatch"><a href="#node-memwatch" class="headerlink" title="node-memwatch"></a>node-memwatch</h3><h3 id="node-mtrace"><a href="#node-mtrace" class="headerlink" title="node-mtrace"></a>node-mtrace</h3><h3 id="node-heap-dump"><a href="#node-heap-dump" class="headerlink" title="node-heap-dump"></a>node-heap-dump</h3><p><strong> 注意：本站博文均系原创，欢迎转载，请注明出处和原网址 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-to-make-the-node-js-application-run-stably&quot;&gt;&lt;a href=&quot;#How-to-make-the-node-js-application-run-stably&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="node.js" scheme="http://yuenshui.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>最小化安装Centos7 编译安装Nginx PHP7 MySQL5.7 Redis3.2 swoole1.8</title>
    <link href="http://yuenshui.com/2016/06/27/Centos7-Nginx-PHP7-MySQL5-7-Redis3-2-swoole1-8/"/>
    <id>http://yuenshui.com/2016/06/27/Centos7-Nginx-PHP7-MySQL5-7-Redis3-2-swoole1-8/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2017-02-26T09:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>技术更新，好久没有更新开发环境了，根据官方文档和网友的分享吧工作环境编译了一遍，过程分享给大家。<br>centos 7最小化安装（CentOS-7-x86_64-Minimal-1511.iso）</p><p>yum search ifconfig 不然自己ip都看不到<br>yum install net-tools.x86_64 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd /etc/yum.repos.d/</span></div><div class="line"><span class="comment"># cp CentOS-Base.repo CentOS-Base.repo.backup</span></div><div class="line"><span class="comment"># wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></div></pre></td></tr></table></figure><h2 id="安装系统包"><a href="#安装系统包" class="headerlink" title="安装系统包"></a>安装系统包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum -y install wget python-lockfile lrzsz bison vim cmake unzip gcc gcc-c++ make automake autoconf curl curl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel e2fsprogs e2fsprogs-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel openldap-clients openldap-servers libevent libevent-devel net-tools nss_ldap pcre-devel gd kernel kernel-headers perl php-common php-gd libtool* patch libmcrypt libmcrypt-devel</span></div></pre></td></tr></table></figure><p>如果没有mkdir命令，yum install python-lockfile<br>如果 libmcrypt libmcrypt-devel 没找到</p><p>下载libmcrypt(<a href="https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download" target="_blank" rel="external">https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download</a>)</p><p>下载mash(<a href="https://sourceforge.net/projects/mhash/" target="_blank" rel="external">https://sourceforge.net/projects/mhash/</a>)</p><p>下载mcrypt(<a href="https://sourceforge.net/projects/mcrypt/files/latest/download" target="_blank" rel="external">https://sourceforge.net/projects/mcrypt/files/latest/download</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf libmcrypt-2.5.8.tar.gz</span></div><div class="line"><span class="comment"># cd libmcrypt-2.5.8</span></div><div class="line"><span class="comment"># ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mhash-0.9.9.9.tar.gz</span></div><div class="line"><span class="comment"># cd mhash-0.9.9.9</span></div><div class="line"><span class="comment"># ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mcrypt-2.6.8.tar.gz</span></div><div class="line"><span class="comment"># cd mcrypt-2.6.8</span></div><div class="line"><span class="comment"># LD_LIBRARY_PATH=/usr/local/lib ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>官网下载最新版本(<a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf nginx-1.10.1.tar.gz</span></div><div class="line"><span class="comment"># cd nginx-1.10.1</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --pid-path=/usr/local/nginx/nginx.pid --conf-path=/usr/local/nginx/nginx.conf</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure><p>nginx启动的shell： /etc/rc.d/init.d/nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment"># chkconfig: 35 85 15</span></div><div class="line"><span class="comment"># description: Nginx is an HTTP(S) server, HTTP(S) reverse</span></div><div class="line"><span class="built_in">set</span> -e</div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=<span class="string">"nginx daemon"</span></div><div class="line">NAME=nginx</div><div class="line">DAEMON=/usr/<span class="built_in">local</span>/nginx/sbin/<span class="variable">$NAME</span></div><div class="line">SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span></div><div class="line"><span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0</div><div class="line"><span class="function"><span class="title">d_start</span></span>()&#123;</div><div class="line">    <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">" already running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_stop</span></span>() &#123;</div><div class="line">    <span class="variable">$DAEMON</span> -s quit || <span class="built_in">echo</span> -n <span class="string">" not running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_reload</span></span>() &#123;</div><div class="line">    <span class="variable">$DAEMON</span> -s reload || <span class="built_in">echo</span> -n <span class="string">" counld not reload"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">    d_start</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">stop)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">    d_stop</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">reload)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Reloading <span class="variable">$DESC</span> configuration..."</span></div><div class="line">    d_reload</div><div class="line">    <span class="built_in">echo</span> <span class="string">"reloaded."</span></div><div class="line">;;</div><div class="line">restart)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>"</span></div><div class="line">    d_stop</div><div class="line">    sleep 2</div><div class="line">    d_start</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">*)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload&#125;"</span> &gt;&amp;2</div><div class="line">    <span class="built_in">exit</span> 3</div><div class="line">;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure></p><p>启动 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service nginx start</span></div></pre></td></tr></table></figure><h2 id="编译PHP"><a href="#编译PHP" class="headerlink" title="编译PHP"></a>编译PHP</h2><p>php.net 官网下载PHP7(<a href="http://php.net/downloads.php" target="_blank" rel="external">http://php.net/downloads.php</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf php-7.0.8.tar.gz</span></div><div class="line"><span class="comment"># cd php-7.0.8</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/php7 \</span></div><div class="line">--with-config-file-path=/usr/<span class="built_in">local</span>/php7/etc \</div><div class="line">--with-config-file-scan-dir=/usr/<span class="built_in">local</span>/php7/etc/php.d \</div><div class="line">--with-mcrypt=/usr/include \</div><div class="line">--<span class="built_in">enable</span>-mysqlnd \</div><div class="line">--with-mysqli \</div><div class="line">--with-pdo-mysql \</div><div class="line">--<span class="built_in">enable</span>-fpm \</div><div class="line">--with-fpm-user=www \</div><div class="line">--with-fpm-group=www \</div><div class="line">--with-gd \</div><div class="line">--with-iconv \</div><div class="line">--with-zlib \</div><div class="line">--<span class="built_in">enable</span>-xml \</div><div class="line">--<span class="built_in">enable</span>-shmop \</div><div class="line">--<span class="built_in">enable</span>-sysvsem \</div><div class="line">--<span class="built_in">enable</span>-inline-optimization \</div><div class="line">--<span class="built_in">enable</span>-mbregex \</div><div class="line">--<span class="built_in">enable</span>-mbstring \</div><div class="line">--<span class="built_in">enable</span>-ftp \</div><div class="line">--<span class="built_in">enable</span>-gd-native-ttf \</div><div class="line">--with-openssl \</div><div class="line">--<span class="built_in">enable</span>-pcntl \</div><div class="line">--<span class="built_in">enable</span>-sockets \</div><div class="line">--with-xmlrpc \</div><div class="line">--<span class="built_in">enable</span>-zip \</div><div class="line">--<span class="built_in">enable</span>-soap \</div><div class="line">--without-pear \</div><div class="line">--with-gettext \</div><div class="line">--<span class="built_in">enable</span>-session \</div><div class="line">--with-curl \</div><div class="line">--with-jpeg-dir \</div><div class="line">--with-freetype-dir \</div><div class="line">--<span class="built_in">enable</span>-opcache</div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># cp php.ini-production  /usr/local/php7/etc/php.ini</span></div><div class="line"><span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></div><div class="line"><span class="comment"># chmod +x /etc/init.d/php-fpm</span></div><div class="line"><span class="comment"># chkconfig --add php-fpm</span></div><div class="line"><span class="comment"># chkconfig php-fpm on</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># cd /usr/local/php7/etc</span></div><div class="line"><span class="comment"># cp php-fpm.conf.default php-fpm.conf</span></div><div class="line"><span class="comment"># cp php-fpm.d/www.conf.default php-fpm.d/www.conf</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># service php-fpm start</span></div></pre></td></tr></table></figure><p>此时应该可以通过 验证PHP的安装信息了<br>修改nginx的php相关配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">        location ~ \.php &#123;</div><div class="line">            root           /media/psf/Home/Documents/website;</div><div class="line">               proxy_buffer_size  128k;</div><div class="line">               proxy_buffers   32 32k;</div><div class="line">               proxy_busy_buffers_size 128k;</div><div class="line">               fastcgi_pass    127.0.0.1:9000;</div><div class="line">               fastcgi_index   index.php;</div><div class="line">               fastcgi_param  SCRIPT_FILENAME   <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">               fastcgi_param  PHP_VALUE        open_basedir=<span class="variable">$document_root</span>:/tmp/:/proc/;</div><div class="line">               include fastcgi_params;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><h2 id="编译MySQL"><a href="#编译MySQL" class="headerlink" title="编译MySQL"></a>编译MySQL</h2><p>mysql 官网下载(<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a>)<br>网页下面的 Select Platform 选择 Source Code，<br>下载网页下面的 mysql-5.7.13.tar.gz mysql-boost-5.7.13.tar.gz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># groupadd mysql</span></div><div class="line"><span class="comment"># useradd -g mysql mysql</span></div><div class="line"><span class="comment"># usermod -s /bin/false mysql</span></div><div class="line"><span class="comment"># mkdir -p /data/mysql</span></div><div class="line"><span class="comment"># chown mysql:mysql /data/mysql</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mysql-boost-5.7.13.tar.gz</span></div><div class="line"><span class="comment"># tar xzf mysql-5.7.13.tar.gz</span></div><div class="line"><span class="comment"># cd mysql-5.7.13</span></div></pre></td></tr></table></figure></p><p>从MySQL 5.7.5开始Boost库是必需的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span></div><div class="line">-DMYSQL_DATADIR=/data/mysql \</div><div class="line">-DWITH_BOOST=boost \</div><div class="line">-DSYSCONFDIR=/usr/<span class="built_in">local</span>/mysql/etc \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DENABLE_DTRACE=0 \</div><div class="line">-DDEFAULT_CHARSET=utf8mb4 \</div><div class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</div><div class="line">-DWITH_EMBEDDED_SERVER=1</div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span></div><div class="line"><span class="comment"># chmod +x /etc/init.d/mysqld</span></div><div class="line"><span class="comment"># chkconfig --add mysqld</span></div><div class="line"><span class="comment"># chkconfig mysqld on</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql/ --datadir=/data/mysql/</span></div><div class="line"><span class="comment"># mkdir /var/run/mariadb</span></div><div class="line"><span class="comment"># chown mysql:mysql -R /var/run/mariadb</span></div><div class="line"><span class="comment"># mkdir /var/log/mariadb</span></div><div class="line"><span class="comment"># chown mysql:mysql -R /var/log/mariadb</span></div><div class="line"><span class="comment"># service mysqld start</span></div><div class="line"> </div><div class="line"><span class="comment"># /usr/local/mysql/bin/mysql -uroot -p</span></div><div class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'root'</span>;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; <span class="built_in">exit</span>;</div></pre></td></tr></table></figure></p><p>此时可以安装一个phpMyAdmin测试一下数据库了。</p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p>官网：<a href="http://redis.io/" target="_blank" rel="external">http://redis.io/</a><br>下载 redis 目前最新版是：redis-3.2.1.tar.gz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf redis-3.2.1.tar.gz</span></div><div class="line"><span class="comment"># cd redis-3.2.1</span></div><div class="line"><span class="comment"># make PREFIX=/usr/local/redis install</span></div><div class="line"><span class="comment"># mkdir /usr/local/redis/etc</span></div><div class="line"><span class="comment"># cp redis.conf /usr/local/redis/etc/6379.conf</span></div><div class="line"><span class="comment"># mkdir /data/redis</span></div></pre></td></tr></table></figure></p><p>修改配置文件/usr/local/redis/etc/6379.conf<br>dir 参数改为 /data/redis<br>daemonize 参数改为 yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/init.d/redis</span></div></pre></td></tr></table></figure><p>添加启动shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># chkconfig: 2345 10 90</span></div><div class="line"><span class="comment"># description: Start and Stop redis</span></div><div class="line"> </div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/redis/bin/redis-server</div><div class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/redis/bin/redis-cli</div><div class="line"> </div><div class="line">PIDFILE=/data/redis/6379.pid</div><div class="line">CONF=<span class="string">"/usr/local/redis/etc/6379.conf"</span></div><div class="line"> </div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed."</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis is running..."</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is not running."</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping..."</span></div><div class="line">               <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span>  SHUTDOWN</div><div class="line">                sleep 2</div><div class="line">               <span class="keyword">while</span> [ -x <span class="variable">$PIDFILE</span> ]</div><div class="line">               <span class="keyword">do</span></div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown..."</span></div><div class="line">                       sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    restart|force-reload)</div><div class="line">        <span class="variable">$&#123;0&#125;</span> stop</div><div class="line">        <span class="variable">$&#123;0&#125;</span> start</div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2</div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure></p><p>启动redis服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service redis start</span></div></pre></td></tr></table></figure></p><p>redis安装完成，如果需要多个redis服务，可以cp多个配置文件和多个redis服务器脚本</p><h2 id="安装redis-for-php模块"><a href="#安装redis-for-php模块" class="headerlink" title="安装redis for php模块"></a>安装redis for php模块</h2><p>官网下载(<a href="https://github.com/phpredis/phpredis" target="_blank" rel="external">https://github.com/phpredis/phpredis</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">unzip phpredis-develop.zip</div><div class="line"><span class="built_in">cd</span> phpredis-develop</div><div class="line">/usr/<span class="built_in">local</span>/php7/bin/phpize</div><div class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php7/bin/php-config</div><div class="line">make</div><div class="line">make install</div><div class="line">vim /usr/<span class="built_in">local</span>/php7/etc/php.ini +</div></pre></td></tr></table></figure><p>添加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=redis.so</div></pre></td></tr></table></figure><p>重启php-fpm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div></pre></td></tr></table></figure></p><p>此时查看phpinfo的页面，应该可以看到redis模块的信息</p><h2 id="安装swoole模块"><a href="#安装swoole模块" class="headerlink" title="安装swoole模块"></a>安装swoole模块</h2><p>官网下载(<a href="https://github.com/swoole/swoolw-src/releases" target="_blank" rel="external">https://github.com/swoole/swoolw-src/releases</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mv 1.8.6-stable.tar.gz swoole-1.8.6-stable.tar.gz</span></div><div class="line"><span class="comment"># tar xzf swoole-1.8.6-stable.tar.gz</span></div><div class="line"><span class="comment"># cd swoole-src-1.8.6-stable/</span></div><div class="line"><span class="comment"># ./configure --with-php-config=/usr/local/php7/bin/php-config</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># vim /usr/local/php7/etc/php.ini +</span></div></pre></td></tr></table></figure><p>添加一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=swoole.so</div></pre></td></tr></table></figure></p><p>重启php-fpm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div></pre></td></tr></table></figure></p><p>此时查看phpinfo的页面，应该可以看到swoole模块的信息</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>官网下载(<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf node-v4.4.6.tar.gz</span></div><div class="line"><span class="comment"># cd node-v4.4.6</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/node</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># vim + /etc/profile</span></div></pre></td></tr></table></figure></p><p>最后增加一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mysql/bin:/usr/<span class="built_in">local</span>/php7/bin:/usr/<span class="built_in">local</span>/node/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p><p>立即生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source /etc/profile</span></div></pre></td></tr></table></figure></p><p>安装pm2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># npm install -g pm2</span></div></pre></td></tr></table></figure></p><p><strong> 注意：本站博文均系原创，欢迎转载，请注明出处和原网址 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术更新，好久没有更新开发环境了，根据官方文档和网友的分享吧工作环境编译了一遍，过程分享给大家。&lt;br&gt;centos 7最小化安装（CentOS-7-x86_64-Minimal-1511.iso）&lt;/p&gt;
&lt;p&gt;yum search ifconfig 不然自己ip都看不到
      
    
    </summary>
    
    
      <category term="node.js" scheme="http://yuenshui.com/tags/node-js/"/>
    
      <category term="PHP" scheme="http://yuenshui.com/tags/PHP/"/>
    
      <category term="Centos7" scheme="http://yuenshui.com/tags/Centos7/"/>
    
      <category term="Nginx" scheme="http://yuenshui.com/tags/Nginx/"/>
    
      <category term="MySQL5.7" scheme="http://yuenshui.com/tags/MySQL5-7/"/>
    
      <category term="Redis3.2" scheme="http://yuenshui.com/tags/Redis3-2/"/>
    
      <category term="swoole1.8" scheme="http://yuenshui.com/tags/swoole1-8/"/>
    
  </entry>
  
  <entry>
    <title>PHP 实现文件下载的断点续传</title>
    <link href="http://yuenshui.com/2005/10/20/PHP-breakpoint-resume/"/>
    <id>http://yuenshui.com/2005/10/20/PHP-breakpoint-resume/</id>
    <published>2005-10-19T16:00:00.000Z</published>
    <updated>2017-02-26T09:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些文件或数据的下载需要收到保护，会用动态语言控制下载的权限控制。下面是早期学习HTTP协议时写的一个PHP下载文件支持断点续传的例子：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 作者 于恩水&lt;yuenshui@126.com&gt;</span></div><div class="line"><span class="comment">* 支持断点续传下载</span></div><div class="line"><span class="comment">* 实例代码：</span></div><div class="line"><span class="comment">*          $down = new SD_DownLoad();</span></div><div class="line"><span class="comment">*          $down-&gt;Down('E:/iso/MS.Office2003SP1.CHS.iso');</span></div><div class="line"><span class="comment">**/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SD_DownLoad</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 下载的开始点</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@var</span> integer</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="keyword">private</span> $mDownStart;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 文件大小</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@var</span> integer</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="keyword">private</span> $mFileSize;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 文件句柄</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@var</span> integer</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="keyword">private</span> $mFileHandle;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 文件全路径</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@var</span> string</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="keyword">private</span> $mFilePath;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 文件下载时显示的文件名</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@var</span> string</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="keyword">private</span> $mFileName;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 构造函数</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> public</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 下载</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> string $pFilePath 文件全路径</span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> string pFileName 文件下载时显示的文件名，缺省为实际文件名</span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> public</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Down</span><span class="params">($pFilePath, $pFileName = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;mFilePath = $pFilePath;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;IniFile()) <span class="keyword">$this</span>-&gt;SendError();</div><div class="line">        <span class="keyword">$this</span>-&gt;mFileName = <span class="keyword">empty</span>($pFileName) ? <span class="keyword">$this</span>-&gt;GetFileName() : $pFileName;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;IniFile();</div><div class="line">        <span class="keyword">$this</span>-&gt;SetStart();</div><div class="line">        <span class="keyword">$this</span>-&gt;SetHeader();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;Send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 初始化文件信息</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> boolean</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">IniFile</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!is_file(<span class="keyword">$this</span>-&gt;mFilePath)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;mFileHandle = fopen(<span class="keyword">$this</span>-&gt;mFilePath, <span class="string">'rb'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;mFileSize = filesize(<span class="keyword">$this</span>-&gt;mFilePath);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 设置下载开始点</span></div><div class="line"><span class="comment">    * </span></div><div class="line"><span class="comment">    * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">    **/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">SetStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_RANGE'</span>]) &amp;&amp; preg_match(<span class="string">"/^bytes=([d]?)-([d]?)$/i"</span>, $_SERVER[<span class="string">'HTTP_RANGE'</span>], $match)) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>($match[<span class="number">1</span>])) <span class="keyword">$this</span>-&gt;mDownStart = $match[<span class="number">1</span>];</div><div class="line">            fseek(<span class="keyword">$this</span>-&gt;mFileHandle, <span class="keyword">$this</span>-&gt;mDownStart);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;mDownStart = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 设置http头</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">SetHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        @header(<span class="string">"Cache-control: public"</span>);</div><div class="line">        @header(<span class="string">"Pragma: public"</span>);</div><div class="line">        Header(<span class="string">"Content-Length: "</span> . (<span class="keyword">$this</span>-&gt;mFileSize - <span class="keyword">$this</span>-&gt;mDownStart));</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mDownStart &gt; <span class="number">0</span>) &#123;</div><div class="line">            @Header(<span class="string">"HTTP/1.1 206 Partial Content"</span>);</div><div class="line">            Header(<span class="string">"Content-Ranges: bytes"</span> . <span class="keyword">$this</span>-&gt;mDownStart . <span class="string">"-"</span> . (<span class="keyword">$this</span>-&gt;mFileSize - <span class="number">1</span>) . <span class="string">"/"</span> . <span class="keyword">$this</span>-&gt;mFileSize);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            Header(<span class="string">"Accept-Ranges: bytes"</span>);</div><div class="line">        &#125;</div><div class="line">        @header(<span class="string">"Content-Type: application/octet-stream"</span>);</div><div class="line">        @header(<span class="string">"Content-Disposition: attachment;filename="</span> . <span class="keyword">$this</span>-&gt;mFileName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 获取全路径里的文件名部分</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> string</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">GetFileName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> basename (<span class="keyword">$this</span>-&gt;mFilePath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 发送数据</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> private</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</div><div class="line">        fpassthru(<span class="keyword">$this</span>-&gt;mFileHandle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 发送错误</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * <span class="doctag">@access</span> public</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span> void</span></div><div class="line"><span class="comment">      **/</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SendError</span><span class="params">()</span> </span>&#123;</div><div class="line">        @header(<span class="string">"HTTP/1.0 404 Not Found"</span>);</div><div class="line">        @header(<span class="string">"Status: 404 Not Found"</span>);</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong> 注意：本站博文均系原创，欢迎转载，请注明出处和原网址 </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有些文件或数据的下载需要收到保护，会用动态语言控制下载的权限控制。下面是早期学习HTTP协议时写的一个PHP下载文件支持断点续传的例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yuenshui.com/tags/PHP/"/>
    
      <category term="断点续传" scheme="http://yuenshui.com/tags/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
    
  </entry>
  
</feed>
