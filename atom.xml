<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mustang Blog</title>
  <subtitle>天行健，君子以自强不息；地势坤，君子以厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yuenshui.com/"/>
  <updated>2017-02-25T13:36:23.000Z</updated>
  <id>http://yuenshui.com/</id>
  
  <author>
    <name>于恩水(Mustang Yu)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>让Node.js程序稳定运行</title>
    <link href="http://yuenshui.com/2017/02/25/How-to-make-the-node-js-application-run-stably/"/>
    <id>http://yuenshui.com/2017/02/25/How-to-make-the-node-js-application-run-stably/</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-02-25T13:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-make-the-node-js-application-run-stably"><a href="#How-to-make-the-node-js-application-run-stably" class="headerlink" title="How to make the node.js application run stably"></a>How to make the node.js application run stably</h2><p>Node.js程序在越来越多的公司部署在生产环境，程序的稳定运行逐渐被大家所关注。下面我就分享一下这方面的经验，仅供参考。</p>
<h2 id="一、捕获错误"><a href="#一、捕获错误" class="headerlink" title="一、捕获错误"></a>一、捕获错误</h2><h3 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h3><p>try语句捕获错误是Javascript在网页或服务器上最常见也是最简单的捕获错误方式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="comment">// 业务代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line">	<span class="comment">// 异常时执行的代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">	<span class="comment">// 最后执行的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式适用于当前执行的代码，语法错误，变量使用异常等情况的异常捕获。但是对于函数、对象里的异常，是无法捕获的。比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(testVar.toString());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div><div class="line">testFun();</div></pre></td></tr></table></figure></p>
<p>如果你们觉得会运行“console.log(testVar.toString())”时捕获到变量未初始化，那就错了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node <span class="built_in">test</span>001.js</div><div class="line">run finally</div><div class="line">/Users/yuenshui/Documents/website/nodejs/<span class="built_in">test</span>001.js:9</div><div class="line">       		console.log(<span class="built_in">test</span>Var.toString());</div><div class="line">       		                   ^</div><div class="line"></div><div class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">'toString'</span> of undefined</div><div class="line">    at <span class="built_in">test</span>Fun (/Users/yuenshui/Documents/website/nodejs/<span class="built_in">test</span>001.js:9:29)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/yuenshui/Documents/website/nodejs/<span class="built_in">test</span>001.js:19:1)</div><div class="line">    at Module._compile (module.js:409:26)</div><div class="line">    at Object.Module._extensions..js (module.js:416:10)</div><div class="line">    at Module.load (module.js:343:32)</div><div class="line">    at Function.Module._load (module.js:300:12)</div><div class="line">    at Function.Module.runMain (module.js:441:10)</div><div class="line">    at startup (node.js:139:18)</div><div class="line">    at node.js:968:3</div></pre></td></tr></table></figure></p>
<p>程序执行到这里就会闪退(Crash)。</p>
<p>解决办法是，在执行的地方捕获错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(testVar.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	testFun();</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node <span class="built_in">test</span>001.js</div><div class="line">run catch [TypeError: Cannot <span class="built_in">read</span> property <span class="string">'toString'</span> of undefined]</div><div class="line">run finally</div></pre></td></tr></table></figure></p>
<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p>如上例，只要在使用变量前加上类型判断，就不会出现程序异常。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> testVar != <span class="string">'undefined'</span>) &#123;</div><div class="line">		<span class="built_in">console</span>.log(testVar.toString());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">testFun();</div></pre></td></tr></table></figure></p>
<p>像这样的情况，一般的熟手都能做的很好，不用依赖try捕获异常来保证稳定运行。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>如果认为上面两个例子通过判断类型避免异常和try语句捕获异常就能解决异常的出现，那就错误。因为还有异步的存在（^_^ 天刹的异步），异步执行的代码中如果产生异常，调用阶段使用try是没意义的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">	fs.readFile(<span class="string">"./abc.bin"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">	&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	testFun(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run catch"</span>, e);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"run finally"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs&gt; node <span class="built_in">test</span>013.js                            </div><div class="line">module.js:327</div><div class="line">    throw err;</div><div class="line">    ^</div><div class="line"></div><div class="line">Error: Cannot find module <span class="string">'/Users/yuenshui/Documents/website/nodejs/test013.js'</span></div><div class="line">    at Function.Module._resolveFilename (module.js:325:15)</div><div class="line">    at Function.Module._load (module.js:276:25)</div><div class="line">    at Function.Module.runMain (module.js:441:10)</div><div class="line">    at startup (node.js:139:18)</div><div class="line">    at node.js:968:3</div></pre></td></tr></table></figure></p>
<p>异步下可以使用Promise捕获：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> testFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">		fs.readFile(<span class="string">"./test.txt"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(err) reject(err);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				resolve(data);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">testFun()</div><div class="line">	.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"then:"</span>, data.toString());</div><div class="line">	&#125;)</div><div class="line">	.catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"catch:"</span>, err);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yuenshui@yuenshuideMacBook-Pro ~/Documents/website/nodejs/chat&gt; node <span class="built_in">test</span>015.js</div><div class="line">catch: &#123; [Error: ENOENT: no such file or directory, open <span class="string">'./test.txt'</span>] errno: -2, code: <span class="string">'ENOENT'</span>, syscall: <span class="string">'open'</span>, path: <span class="string">'./test.txt'</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用domain"><a href="#使用domain" class="headerlink" title="使用domain"></a>使用domain</h3><p>这是官方给的一个例子，在用domain创建的域里执行程序，将会捕获到程序的错误。<br>官方给的解释是：domain提供了将多个不同IO操作作为单个组处理的方式。如果任何注册到域的事件发射器或回调函数发出“error”事件或者抛出一个错误，那么将通知域对象，而不是直接让这个错误的上下文从process.on(‘uncaughtException’)处理程序中丢失掉，甚至程序立即退出并显示错误代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="built_in">require</span>(<span class="string">'domain'</span>).create();</div><div class="line">d.on(<span class="string">'error'</span>, (er) =&gt; &#123;</div><div class="line">  <span class="comment">// The error won't crash the process, but what it does is worse!</span></div><div class="line">  <span class="comment">// Though we've prevented abrupt process restarting, we are leaking</span></div><div class="line">  <span class="comment">// resources like crazy if this ever happens.</span></div><div class="line">  <span class="comment">// This is no better than process.on('uncaughtException')!</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'error, but oh well'</span>, er.message);</div><div class="line">&#125;);</div><div class="line">d.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    handleRequest(req, res);</div><div class="line">  &#125;).listen(PORT);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="uncaughtException-事件"><a href="#uncaughtException-事件" class="headerlink" title="uncaughtException 事件"></a>uncaughtException 事件</h3><p>通过process的uncaughtException事件，来处理未捕获的异常。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'catch fatal error: '</span> + err.stack || err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="二、进程守护"><a href="#二、进程守护" class="headerlink" title="二、进程守护"></a>二、进程守护</h2><h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><p>官网：<a href="http://pm2.keymetrics.io/" target="_blank" rel="external">http://pm2.keymetrics.io/</a><br>PM2是一个进程管理器，在进程闪退后立即重启该进程，起到了守护作用，并且记录error_log，用于错误分析。<br>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure></p>
<p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ npm install pm2 -g     <span class="comment"># 命令行安装 pm2 </span></div><div class="line">$ pm2 start app.js -i 4 <span class="comment">#后台运行pm2，启动4个app.js </span></div><div class="line">                                <span class="comment"># 也可以把'max' 参数传递给 start</span></div><div class="line">                                <span class="comment"># 正确的进程数目依赖于Cpu的核心数目</span></div><div class="line">$ pm2 start app.js --name my-api <span class="comment"># 命名进程</span></div><div class="line">$ pm2 list               <span class="comment"># 显示所有进程状态</span></div><div class="line">$ pm2 monit              <span class="comment"># 监视所有进程</span></div><div class="line">$ pm2 logs               <span class="comment">#  显示所有进程日志</span></div><div class="line">$ pm2 stop all           <span class="comment"># 停止所有进程</span></div><div class="line">$ pm2 restart all        <span class="comment"># 重启所有进程</span></div><div class="line">$ pm2 reload all         <span class="comment"># 0秒停机重载进程 (用于 NETWORKED 进程)</span></div><div class="line">$ pm2 stop 0             <span class="comment"># 停止指定的进程</span></div><div class="line">$ pm2 restart 0          <span class="comment"># 重启指定的进程</span></div><div class="line">$ pm2 startup            <span class="comment"># 产生 init 脚本 保持进程活着</span></div><div class="line">$ pm2 web                <span class="comment"># 运行健壮的 computer API endpoint (http://localhost:9615)</span></div><div class="line">$ pm2 delete 0           <span class="comment"># 杀死指定的进程</span></div><div class="line">$ pm2 delete all         <span class="comment"># 杀死全部进程</span></div><div class="line"></div><div class="line">运行进程的不同方式：</div><div class="line">$ pm2 start app.js -i max  <span class="comment"># 根据有效CPU数目启动最大进程数目</span></div><div class="line">$ pm2 start app.js -i 3      <span class="comment"># 启动3个进程</span></div><div class="line">$ pm2 start app.js -x        <span class="comment">#用fork模式启动 app.js 而不是使用 cluster</span></div><div class="line">$ pm2 start app.js -x -- <span class="_">-a</span> 23   <span class="comment"># 用fork模式启动 app.js 并且传递参数 (-a 23)</span></div><div class="line">$ pm2 start app.js --name serverone  <span class="comment"># 启动一个进程并把它命名为 serverone</span></div><div class="line">$ pm2 stop serverone       <span class="comment"># 停止 serverone 进程</span></div><div class="line">$ pm2 start app.json        <span class="comment"># 启动进程, 在 app.json里设置选项</span></div><div class="line">$ pm2 start app.js -i max -- <span class="_">-a</span> 23                   <span class="comment">#在--之后给 app.js 传递参数</span></div><div class="line">$ pm2 start app.js -i max <span class="_">-e</span> err.log -o out.log  <span class="comment"># 启动 并 生成一个配置文件</span></div><div class="line">你也可以执行用其他语言编写的app  ( fork 模式):</div><div class="line">$ pm2 start my-bash-script.sh    -x --interpreter bash</div><div class="line">$ pm2 start my-python-script.py -x --interpreter python</div></pre></td></tr></table></figure></p>
<h3 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h3><p>官网：<a href="https://github.com/foreverjs/forever" target="_blank" rel="external">https://github.com/foreverjs/forever</a><br>从功能上来看，个人感觉不如PM2全面和完善，具体的网上有很多教程和资料，就不赘述了。</p>
<h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="node-inspector"><a href="#node-inspector" class="headerlink" title="node-inspector"></a>node-inspector</h3><p>这个模块提供了基于V8分析器的调试接口，配合chrome浏览器，可以直观的浏览运行时内存。<br>用于分析业务中可能的缺陷很有帮助。<br>安装并运行node-inspector<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; node --debug app.js</div><div class="line">&gt; node-inspector</div><div class="line">Node Inspector v0.12.8</div><div class="line">Visit http://127.0.0.1:8080/?port=5858 to start debugging.</div></pre></td></tr></table></figure></p>
<p>运行需要调试的项目，加“—-debug”参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; node —-debug app.js</div><div class="line">Debugger listening on [::]:5858</div></pre></td></tr></table></figure>
<p>chrome 打开  <a href="http://127.0.0.1:8080/?port=5858" target="_blank" rel="external">http://127.0.0.1:8080/?port=5858</a> 就可以看到调试界面。<br>点击“Profiles”，选择“Take Heap Snapshor” 点击 “Take Snapshot”就可以浏览运行时内存数据了。<br><img src="/img/node-take-snapshot.png" alt="Node.js Take Snapshot"></p>
<h3 id="node-memwatch"><a href="#node-memwatch" class="headerlink" title="node-memwatch"></a>node-memwatch</h3><h3 id="node-mtrace"><a href="#node-mtrace" class="headerlink" title="node-mtrace"></a>node-mtrace</h3><h3 id="node-heap-dump"><a href="#node-heap-dump" class="headerlink" title="node-heap-dump"></a>node-heap-dump</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;How-to-make-the-node-js-application-run-stably&quot;&gt;&lt;a href=&quot;#How-to-make-the-node-js-application-run-stably&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yuenshui.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>最小化安装Centos7 编译安装Nginx PHP7 MySQL5.7 Redis3.2 swoole1.8</title>
    <link href="http://yuenshui.com/2016/06/27/Centos7-Nginx-PHP7-MySQL5-7-Redis3-2-swoole1-8/"/>
    <id>http://yuenshui.com/2016/06/27/Centos7-Nginx-PHP7-MySQL5-7-Redis3-2-swoole1-8/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2017-02-25T02:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>技术更新，好久没有更新开发环境了，根据官方文档和网友的分享吧工作环境编译了一遍，过程分享给大家。<br>centos 7最小化安装（CentOS-7-x86_64-Minimal-1511.iso）</p>
<p>yum search ifconfig 不然自己ip都看不到<br>yum install net-tools.x86_64 wget</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd /etc/yum.repos.d/</span></div><div class="line"><span class="comment"># cp CentOS-Base.repo CentOS-Base.repo.backup</span></div><div class="line"><span class="comment"># wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></div></pre></td></tr></table></figure>
<h2 id="安装系统包"><a href="#安装系统包" class="headerlink" title="安装系统包"></a>安装系统包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum -y install wget python-lockfile lrzsz bison vim cmake unzip gcc gcc-c++ make automake autoconf curl curl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel e2fsprogs e2fsprogs-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel openldap-clients openldap-servers libevent libevent-devel net-tools nss_ldap pcre-devel gd kernel kernel-headers perl php-common php-gd libtool* patch libmcrypt libmcrypt-devel</span></div></pre></td></tr></table></figure>
<p>如果没有mkdir命令，yum install python-lockfile<br>如果 libmcrypt libmcrypt-devel 没找到</p>
<p>下载libmcrypt(<a href="https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download" target="_blank" rel="external">https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz/download</a>)</p>
<p>下载mash(<a href="https://sourceforge.net/projects/mhash/" target="_blank" rel="external">https://sourceforge.net/projects/mhash/</a>)</p>
<p>下载mcrypt(<a href="https://sourceforge.net/projects/mcrypt/files/latest/download" target="_blank" rel="external">https://sourceforge.net/projects/mcrypt/files/latest/download</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf libmcrypt-2.5.8.tar.gz</span></div><div class="line"><span class="comment"># cd libmcrypt-2.5.8</span></div><div class="line"><span class="comment"># ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mhash-0.9.9.9.tar.gz</span></div><div class="line"><span class="comment"># cd mhash-0.9.9.9</span></div><div class="line"><span class="comment"># ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mcrypt-2.6.8.tar.gz</span></div><div class="line"><span class="comment"># cd mcrypt-2.6.8</span></div><div class="line"><span class="comment"># LD_LIBRARY_PATH=/usr/local/lib ./configure</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>官网下载最新版本(<a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf nginx-1.10.1.tar.gz</span></div><div class="line"><span class="comment"># cd nginx-1.10.1</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --pid-path=/usr/local/nginx/nginx.pid --conf-path=/usr/local/nginx/nginx.conf</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<p>nginx启动的shell： /etc/rc.d/init.d/nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment"># chkconfig: 35 85 15</span></div><div class="line"><span class="comment"># description: Nginx is an HTTP(S) server, HTTP(S) reverse</span></div><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=<span class="string">"nginx daemon"</span></div><div class="line">NAME=nginx</div><div class="line">DAEMON=/usr/<span class="built_in">local</span>/nginx/sbin/<span class="variable">$NAME</span></div><div class="line">SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span></div><div class="line"><span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0</div><div class="line"><span class="function"><span class="title">d_start</span></span>()&#123;</div><div class="line">    <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">" already running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_stop</span></span>() &#123;</div><div class="line">    <span class="variable">$DAEMON</span> <span class="_">-s</span> quit || <span class="built_in">echo</span> -n <span class="string">" not running"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">d_reload</span></span>() &#123;</div><div class="line">    <span class="variable">$DAEMON</span> <span class="_">-s</span> reload || <span class="built_in">echo</span> -n <span class="string">" counld not reload"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">    d_start</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">stop)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>"</span></div><div class="line">    d_stop</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">reload)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Reloading <span class="variable">$DESC</span> configuration..."</span></div><div class="line">    d_reload</div><div class="line">    <span class="built_in">echo</span> <span class="string">"reloaded."</span></div><div class="line">;;</div><div class="line">restart)</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">"Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>"</span></div><div class="line">    d_stop</div><div class="line">    sleep 2</div><div class="line">    d_start</div><div class="line">    <span class="built_in">echo</span> <span class="string">"."</span></div><div class="line">;;</div><div class="line">*)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload&#125;"</span> &gt;&amp;2</div><div class="line">    <span class="built_in">exit</span> 3</div><div class="line">;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure></p>
<p>启动 nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service nginx start</span></div></pre></td></tr></table></figure>
<h2 id="编译PHP"><a href="#编译PHP" class="headerlink" title="编译PHP"></a>编译PHP</h2><p>php.net 官网下载PHP7(<a href="http://php.net/downloads.php" target="_blank" rel="external">http://php.net/downloads.php</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf php-7.0.8.tar.gz</span></div><div class="line"><span class="comment"># cd php-7.0.8</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/php7 \</span></div><div class="line">--with-config-file-path=/usr/<span class="built_in">local</span>/php7/etc \</div><div class="line">--with-config-file-scan-dir=/usr/<span class="built_in">local</span>/php7/etc/php.d \</div><div class="line">--with-mcrypt=/usr/include \</div><div class="line">--enable-mysqlnd \</div><div class="line">--with-mysqli \</div><div class="line">--with-pdo-mysql \</div><div class="line">--enable-fpm \</div><div class="line">--with-fpm-user=www \</div><div class="line">--with-fpm-group=www \</div><div class="line">--with-gd \</div><div class="line">--with-iconv \</div><div class="line">--with-zlib \</div><div class="line">--enable-xml \</div><div class="line">--enable-shmop \</div><div class="line">--enable-sysvsem \</div><div class="line">--enable-inline-optimization \</div><div class="line">--enable-mbregex \</div><div class="line">--enable-mbstring \</div><div class="line">--enable-ftp \</div><div class="line">--enable-gd-native-ttf \</div><div class="line">--with-openssl \</div><div class="line">--enable-pcntl \</div><div class="line">--enable-sockets \</div><div class="line">--with-xmlrpc \</div><div class="line">--enable-zip \</div><div class="line">--enable-soap \</div><div class="line">--without-pear \</div><div class="line">--with-gettext \</div><div class="line">--enable-session \</div><div class="line">--with-curl \</div><div class="line">--with-jpeg-dir \</div><div class="line">--with-freetype-dir \</div><div class="line">--enable-opcache</div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># cp php.ini-production  /usr/local/php7/etc/php.ini</span></div><div class="line"><span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></div><div class="line"><span class="comment"># chmod +x /etc/init.d/php-fpm</span></div><div class="line"><span class="comment"># chkconfig --add php-fpm</span></div><div class="line"><span class="comment"># chkconfig php-fpm on</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># cd /usr/local/php7/etc</span></div><div class="line"><span class="comment"># cp php-fpm.conf.default php-fpm.conf</span></div><div class="line"><span class="comment"># cp php-fpm.d/www.conf.default php-fpm.d/www.conf</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># service php-fpm start</span></div></pre></td></tr></table></figure>
<p>此时应该可以通过 验证PHP的安装信息了<br>修改nginx的php相关配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">        location ~ \.php &#123;</div><div class="line">            root           /media/psf/Home/Documents/website;</div><div class="line">               proxy_buffer_size  128k;</div><div class="line">               proxy_buffers   32 32k;</div><div class="line">               proxy_busy_buffers_size 128k;</div><div class="line">               fastcgi_pass    127.0.0.1:9000;</div><div class="line">               fastcgi_index   index.php;</div><div class="line">               fastcgi_param  SCRIPT_FILENAME   <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">               fastcgi_param  PHP_VALUE        open_basedir=<span class="variable">$document_root</span>:/tmp/:/proc/;</div><div class="line">               include fastcgi_params;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="编译MySQL"><a href="#编译MySQL" class="headerlink" title="编译MySQL"></a>编译MySQL</h2><p>mysql 官网下载(<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a>)<br>网页下面的 Select Platform 选择 Source Code，<br>下载网页下面的 mysql-5.7.13.tar.gz mysql-boost-5.7.13.tar.gz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># groupadd mysql</span></div><div class="line"><span class="comment"># useradd -g mysql mysql</span></div><div class="line"><span class="comment"># usermod -s /bin/false mysql</span></div><div class="line"><span class="comment"># mkdir -p /data/mysql</span></div><div class="line"><span class="comment"># chown mysql:mysql /data/mysql</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># tar xzf mysql-boost-5.7.13.tar.gz</span></div><div class="line"><span class="comment"># tar xzf mysql-5.7.13.tar.gz</span></div><div class="line"><span class="comment"># cd mysql-5.7.13</span></div></pre></td></tr></table></figure></p>
<p>从MySQL 5.7.5开始Boost库是必需的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span></div><div class="line">-DMYSQL_DATADIR=/data/mysql \</div><div class="line">-DWITH_BOOST=boost \</div><div class="line">-DSYSCONFDIR=/usr/<span class="built_in">local</span>/mysql/etc \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DENABLE_DTRACE=0 \</div><div class="line">-DDEFAULT_CHARSET=utf8mb4 \</div><div class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</div><div class="line">-DWITH_EMBEDDED_SERVER=1</div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span></div><div class="line"><span class="comment"># chmod +x /etc/init.d/mysqld</span></div><div class="line"><span class="comment"># chkconfig --add mysqld</span></div><div class="line"><span class="comment"># chkconfig mysqld on</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql/ --datadir=/data/mysql/</span></div><div class="line"><span class="comment"># mkdir /var/run/mariadb</span></div><div class="line"><span class="comment"># chown mysql:mysql -R /var/run/mariadb</span></div><div class="line"><span class="comment"># mkdir /var/log/mariadb</span></div><div class="line"><span class="comment"># chown mysql:mysql -R /var/log/mariadb</span></div><div class="line"><span class="comment"># service mysqld start</span></div><div class="line"> </div><div class="line"><span class="comment"># /usr/local/mysql/bin/mysql -uroot -p</span></div><div class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'root'</span>;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; <span class="built_in">exit</span>;</div></pre></td></tr></table></figure></p>
<p>此时可以安装一个phpMyAdmin测试一下数据库了。</p>
<h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p>官网：<a href="http://redis.io/" target="_blank" rel="external">http://redis.io/</a><br>下载 redis 目前最新版是：redis-3.2.1.tar.gz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf redis-3.2.1.tar.gz</span></div><div class="line"><span class="comment"># cd redis-3.2.1</span></div><div class="line"><span class="comment"># make PREFIX=/usr/local/redis install</span></div><div class="line"><span class="comment"># mkdir /usr/local/redis/etc</span></div><div class="line"><span class="comment"># cp redis.conf /usr/local/redis/etc/6379.conf</span></div><div class="line"><span class="comment"># mkdir /data/redis</span></div></pre></td></tr></table></figure></p>
<p>修改配置文件/usr/local/redis/etc/6379.conf<br>dir 参数改为 /data/redis<br>daemonize 参数改为 yes</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/init.d/redis</span></div></pre></td></tr></table></figure>
<p>添加启动shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># chkconfig: 2345 10 90</span></div><div class="line"><span class="comment"># description: Start and Stop redis</span></div><div class="line"> </div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/redis/bin/redis-server</div><div class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/redis/bin/redis-cli</div><div class="line"> </div><div class="line">PIDFILE=/data/redis/6379.pid</div><div class="line">CONF=<span class="string">"/usr/local/redis/etc/6379.conf"</span></div><div class="line"> </div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed."</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis is running..."</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is not running."</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping..."</span></div><div class="line">               <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span>  SHUTDOWN</div><div class="line">                sleep 2</div><div class="line">               <span class="keyword">while</span> [ -x <span class="variable">$PIDFILE</span> ]</div><div class="line">               <span class="keyword">do</span></div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown..."</span></div><div class="line">                       sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    restart|force-reload)</div><div class="line">        <span class="variable">$&#123;0&#125;</span> stop</div><div class="line">        <span class="variable">$&#123;0&#125;</span> start</div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2</div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure></p>
<p>启动redis服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service redis start</span></div></pre></td></tr></table></figure></p>
<p>redis安装完成，如果需要多个redis服务，可以cp多个配置文件和多个redis服务器脚本</p>
<h2 id="安装redis-for-php模块"><a href="#安装redis-for-php模块" class="headerlink" title="安装redis for php模块"></a>安装redis for php模块</h2><p>官网下载(<a href="https://github.com/phpredis/phpredis" target="_blank" rel="external">https://github.com/phpredis/phpredis</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">unzip phpredis-develop.zip</div><div class="line"><span class="built_in">cd</span> phpredis-develop</div><div class="line">/usr/<span class="built_in">local</span>/php7/bin/phpize</div><div class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php7/bin/php-config</div><div class="line">make</div><div class="line">make install</div><div class="line">vim /usr/<span class="built_in">local</span>/php7/etc/php.ini +</div></pre></td></tr></table></figure>
<p>添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=redis.so</div></pre></td></tr></table></figure>
<p>重启php-fpm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div></pre></td></tr></table></figure></p>
<p>此时查看phpinfo的页面，应该可以看到redis模块的信息</p>
<h2 id="安装swoole模块"><a href="#安装swoole模块" class="headerlink" title="安装swoole模块"></a>安装swoole模块</h2><p>官网下载(<a href="https://github.com/swoole/swoolw-src/releases" target="_blank" rel="external">https://github.com/swoole/swoolw-src/releases</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mv 1.8.6-stable.tar.gz swoole-1.8.6-stable.tar.gz</span></div><div class="line"><span class="comment"># tar xzf swoole-1.8.6-stable.tar.gz</span></div><div class="line"><span class="comment"># cd swoole-src-1.8.6-stable/</span></div><div class="line"><span class="comment"># ./configure --with-php-config=/usr/local/php7/bin/php-config</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment"># vim /usr/local/php7/etc/php.ini +</span></div></pre></td></tr></table></figure>
<p>添加一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=swoole.so</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div></pre></td></tr></table></figure></p>
<p>此时查看phpinfo的页面，应该可以看到swoole模块的信息</p>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>官网下载(<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tar xzf node-v4.4.6.tar.gz</span></div><div class="line"><span class="comment"># cd node-v4.4.6</span></div><div class="line"><span class="comment"># ./configure --prefix=/usr/local/node</span></div><div class="line"><span class="comment"># make &amp;&amp; make install</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># vim + /etc/profile</span></div></pre></td></tr></table></figure></p>
<p>最后增加一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mysql/bin:/usr/<span class="built_in">local</span>/php7/bin:/usr/<span class="built_in">local</span>/node/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>立即生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># source /etc/profile</span></div></pre></td></tr></table></figure></p>
<p>安装pm2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># npm install -g pm2</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技术更新，好久没有更新开发环境了，根据官方文档和网友的分享吧工作环境编译了一遍，过程分享给大家。&lt;br&gt;centos 7最小化安装（CentOS-7-x86_64-Minimal-1511.iso）&lt;/p&gt;
&lt;p&gt;yum search ifconfig 不然自己ip都看不到
    
    </summary>
    
    
      <category term="Centos7" scheme="http://yuenshui.com/tags/Centos7/"/>
    
      <category term="Nginx" scheme="http://yuenshui.com/tags/Nginx/"/>
    
      <category term="PHP7" scheme="http://yuenshui.com/tags/PHP7/"/>
    
      <category term="MySQL5.7" scheme="http://yuenshui.com/tags/MySQL5-7/"/>
    
      <category term="Redis3.2" scheme="http://yuenshui.com/tags/Redis3-2/"/>
    
      <category term="swoole1.8" scheme="http://yuenshui.com/tags/swoole1-8/"/>
    
  </entry>
  
</feed>
